[{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"essential-r","dir":"Articles","previous_headings":"","what":"Essential R","title":"B. Using R to Understand Bioinformatic Results","text":"simple calculator ‘Vectors’ building blocks Variables, missing values ‘factors’ Data structures coordinate related vectors – data.frame Key opererations data.frame df[1:3, c(\"gender\", \"age\")] – subset rows columns df[[\"age\"]], df$age – select columns Functions   ‘Vectorized’ operations, e.g., element-wise addition without explicit ‘’ loop  Write functions Iterate, usually lapply() although () available","code":"1 + 1 ## [1] 2 c(1, 2, 3) ## [1] 1 2 3 c(\"January\", \"February\", \"March\") ## [1] \"January\"  \"February\" \"March\" c(TRUE, FALSE) ## [1]  TRUE FALSE age <- c(27, NA, 32, 29) gender <- factor(     c(\"Female\", \"Male\", \"Non-binary\", NA),     levels = c(\"Female\", \"Male\", \"Non-binary\") ) df <- data.frame(     age = c(27, NA, 32, 29),     gender = gender ) df ##   age     gender ## 1  27     Female ## 2  NA       Male ## 3  32 Non-binary ## 4  29       <NA> rnorm(5)        # 5 random normal deviates ## [1] -2.0936355  1.0689208  1.0324525 -0.1421387 -0.2514273 x <- rnorm(100) # 100 random normal deviates hist(x)         # histogram, approximately normal plot(density(x)) # a little more sophisticated? y <- x + rnorm(100) plot(y ~ x) fit <- lm(y ~ x) fit         # an R 'object' containing information about the ##  ## Call: ## lm(formula = y ~ x) ##  ## Coefficients: ## (Intercept)            x   ##     -0.1073       1.1454             # regression of y on x abline(fit) # plot points and fitted regression line anova(fit)  # statistical summary of linear regression ## Analysis of Variance Table ##  ## Response: y ##           Df  Sum Sq Mean Sq F value    Pr(>F)     ## x          1 171.915 171.915  178.57 < 2.2e-16 *** ## Residuals 98  94.348   0.963                       ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 hello <- function(who) {     paste(\"hello\", who, \"with\", nchar(who), \"letters in your name\") } hello(\"Martin\") ## [1] \"hello Martin with 6 letters in your name\" names <- c(\"Martin\", \"Thomas\") lapply(names, hello) ## [[1]] ## [1] \"hello Martin with 6 letters in your name\" ##  ## [[2]] ## [1] \"hello Thomas with 6 letters in your name\""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"B. Using R to Understand Bioinformatic Results","text":"Extend functionality base R. Can part ‘base’ distribution…","code":"## iterate over the numbers 1 through 8, 'sleeping' for 1 second ## each. Takes about 8 seconds... system.time({     lapply(1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.003   0.000   8.011  ## sleep in parallel -- takes only 2 seconds library(parallel) cl <- makeCluster(4) # cluster of 4 workers system.time({     parLapply(cl, 1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.002   0.000   2.086"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"tidyverse","dir":"Articles","previous_headings":"Packages","what":"Tidyverse","title":"B. Using R to Understand Bioinformatic Results","text":"dplyr package introduces ‘tidyverse’ ‘tibble’ like ‘data.frame’, user-friendly tidyverse makes use ‘pipes’ |> (older syntax %>%). pipe takes left-hand side pass right-hand side. Key dplyr ‘verbs’ can piped together tibble() – representation data.frame, better display long wide data frames. tribble() constructs tibble way makes relationship data across rows transparent. glimpse() – providing quick look columns data tibble transposing tibble display ‘column’ single line. select() – column selection. filter(), slice() – row selection. pull() – extract single column vector. mutate() – column transformation. count() – count occurences one columns. arrange() – order rows values one columns. distinct() – reduce tibble unique rows. group_by() – perform computations groups defined one several columns. summarize() – calculate summary statstics groups. left_join(), right_join(), inner_join() – merge two tibbles based shared columns, preserving rows first (left_join()) second (right_join()) (inner_join()) tibble. ‘classic’ built-data set – Motor Trend ‘cars’ 1974… ‘tidyverse’ eschews rownames, make column. Use group_by() summarize group (cyl). n() function dplyr returns number records group.","code":"library(dplyr) tbl <- tibble(     x = rnorm(100),     y = x + rnorm(100) )  ## e.g., only displays the first 10 rows tbl ## # A tibble: 100 × 2 ##         x       y ##     <dbl>   <dbl> ##  1 -0.369 -3.28   ##  2 -0.346 -1.11   ##  3  0.747  1.88   ##  4  0.416  0.0899 ##  5  1.53   1.68   ##  6  0.374 -0.240  ##  7  1.65   1.16   ##  8 -0.939 -1.50   ##  9  0.940  2.52   ## 10 -0.220 -1.63   ## # ℹ 90 more rows tbl |>     ## e.g., just rows with non-negative values of x and y     filter(x > 0, y > 0) |>     ## add a column     mutate(distance_from_origin = sqrt(x^2 + y^2)) ## # A tibble: 41 × 3 ##        x      y distance_from_origin ##    <dbl>  <dbl>                <dbl> ##  1 0.747 1.88                  2.02  ##  2 0.416 0.0899                0.426 ##  3 1.53  1.68                  2.27  ##  4 1.65  1.16                  2.02  ##  5 0.940 2.52                  2.69  ##  6 2.31  1.31                  2.65  ##  7 1.41  1.34                  1.94  ##  8 1.20  1.10                  1.62  ##  9 0.925 0.325                 0.980 ## 10 0.540 0.684                 0.872 ## # ℹ 31 more rows mtcars_tbl <-     mtcars |>     as_tibble(rownames = \"model\") |>     mutate(cyl = factor(cyl)) mtcars_tbl ## # A tibble: 32 × 12 ##    model         mpg cyl    disp    hp  drat    wt  qsec    vs    am  gear  carb ##    <chr>       <dbl> <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> ##  1 Mazda RX4    21   6      160    110  3.9   2.62  16.5     0     1     4     4 ##  2 Mazda RX4 …  21   6      160    110  3.9   2.88  17.0     0     1     4     4 ##  3 Datsun 710   22.8 4      108     93  3.85  2.32  18.6     1     1     4     1 ##  4 Hornet 4 D…  21.4 6      258    110  3.08  3.22  19.4     1     0     3     1 ##  5 Hornet Spo…  18.7 8      360    175  3.15  3.44  17.0     0     0     3     2 ##  6 Valiant      18.1 6      225    105  2.76  3.46  20.2     1     0     3     1 ##  7 Duster 360   14.3 8      360    245  3.21  3.57  15.8     0     0     3     4 ##  8 Merc 240D    24.4 4      147.    62  3.69  3.19  20       1     0     4     2 ##  9 Merc 230     22.8 4      141.    95  3.92  3.15  22.9     1     0     4     2 ## 10 Merc 280     19.2 6      168.   123  3.92  3.44  18.3     1     0     4     4 ## # ℹ 22 more rows  mtcars_tbl |>     group_by(cyl) |>     summarize(         n = n(),         mean_mpg = mean(mpg, na.rm = TRUE),         var_mpg = var(mpg, na.rm = TRUE)     ) ## # A tibble: 3 × 4 ##   cyl       n mean_mpg var_mpg ##   <fct> <int>    <dbl>   <dbl> ## 1 4        11     26.7   20.3  ## 2 6         7     19.7    2.11 ## 3 8        14     15.1    6.55"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"visualization","dir":"Articles","previous_headings":"Packages","what":"Visualization","title":"B. Using R to Understand Bioinformatic Results","text":"Another example contributed package ggplot2 visualization  Check plotly, especially interactive visualization (e.g., ‘tooltips’ mousing points, dragging subset zoom )","code":"library(ggplot2) ggplot(tbl) +     aes(x, y) +                # use 'x' and 'y' columns for plotting...     geom_point() +             # ...plot points...     geom_smooth(method = \"lm\") # ...linear regresion library(plotly) plt <-     ggplot(mtcars_tbl) +     aes(x = cyl, y = mpg, text = model) +     geom_jitter(width = .25) +     geom_boxplot() ggplotly(plt)"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"where-do-packages-come-from","dir":"Articles","previous_headings":"Packages","what":"Where do Packages Come From?","title":"B. Using R to Understand Bioinformatic Results","text":"CRAN: Comprehensive R Archive Network. 18,000 packages. help CRAN Task Views identifying relevant packages. Bioconductor: 2100 packages relevant high-throughput genomic analysis. Vignettes important part Bioconductor packages. Install packages per R installation, using BiocManager::install(<package-name>) (CRAN Bioconductor) GitHub? Packages haven’t checked formal system, may incomplete code, documentation, dependencies packages, etc. Authors may yet committed long-term maintenance package.","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"help-vignettes","dir":"Articles","previous_headings":"Packages","what":"Help & Vignettes","title":"B. Using R to Understand Bioinformatic Results","text":"Help pages, e.g., ?lm Vignettes, e.g., Google, StackOverflow, etc…","code":"vignette(package = \"ggplot2\") vignette(\"ggplot2-specs\", \"ggplot2\")"},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"cell-summary","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"Cell summary","title":"B. Using R to Understand Bioinformatic Results","text":"Read ‘csv’ file summarizing infomration cell experiment. Summarize information – many donors, developmental stage, ethnicity? cell types annotated? Cell types ethnicity? Reflecting – replication across non-European ethnicity, statistical insights available. Pooled samples probably require careful treatment downstream analysis.","code":"## use `file.choose()` or similar for your own data sets cell_data_csv <- system.file(package = \"XM2023\", \"scrnaseq-cell-data.csv\") cell_data <- readr::read_csv(cell_data_csv) cell_data |>     glimpse() ## Rows: 31,696 ## Columns: 37 ## $ cell_id                                  <chr> \"CMGpool_AAACCCAAGGACAACC\", \"… ## $ UMAP_1                                   <dbl> -5.9931696, -6.7217583, -9.01… ## $ UMAP_2                                   <dbl> -1.9311870, -1.3059803, -3.39… ## $ donor_id                                 <chr> \"pooled [D9,D7,D8,D10,D6]\", \"… ## $ self_reported_ethnicity_ontology_term_id <chr> \"HANCESTRO:0005\", \"HANCESTRO:… ## $ donor_BMI                                <chr> \"pooled [30.5,22.7,23.5,26.8,… ## $ donor_times_pregnant                     <chr> \"pooled [3,0,3,2,2]\", \"pooled… ## $ family_history_breast_cancer             <chr> \"pooled [unknown,False,False,… ## $ organism_ontology_term_id                <chr> \"NCBITaxon:9606\", \"NCBITaxon:… ## $ tyrer_cuzick_lifetime_risk               <chr> \"pooled [12,14.8,8.8,14.3,20.… ## $ sample_uuid                              <chr> \"pooled [f008c67a-abb4-4563-8… ## $ sample_preservation_method               <chr> \"cryopreservation\", \"cryopres… ## $ tissue_ontology_term_id                  <chr> \"UBERON:0035328\", \"UBERON:003… ## $ development_stage_ontology_term_id       <chr> \"HsapDv:0000087\", \"HsapDv:000… ## $ suspension_uuid                          <chr> \"38d793cb-d811-4863-aec0-2fa7… ## $ suspension_type                          <chr> \"cell\", \"cell\", \"cell\", \"cell… ## $ library_uuid                             <chr> \"385d8d7c-5038-4f0e-b7f3-ec9a… ## $ assay_ontology_term_id                   <chr> \"EFO:0009922\", \"EFO:0009922\",… ## $ mapped_reference_annotation              <chr> \"GENCODE 28\", \"GENCODE 28\", \"… ## $ is_primary_data                          <lgl> TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ cell_type_ontology_term_id               <chr> \"CL:0011026\", \"CL:0011026\", \"… ## $ author_cell_type                         <chr> \"luminal progenitor\", \"lumina… ## $ disease_ontology_term_id                 <chr> \"PATO:0000461\", \"PATO:0000461… ## $ sex_ontology_term_id                     <chr> \"PATO:0000383\", \"PATO:0000383… ## $ nCount_RNA                               <dbl> 2937, 5495, 5598, 3775, 2146,… ## $ nFeature_RNA                             <dbl> 1183, 1827, 2037, 1448, 1027,… ## $ percent.mito                             <dbl> 0.02076949, 0.03676069, 0.043… ## $ seurat_clusters                          <dbl> 3, 3, 24, 1, 3, 1, 1, 4, 1, 0… ## $ sample_id                                <chr> \"CMGpool\", \"CMGpool\", \"CMGpoo… ## $ cell_type                                <chr> \"progenitor cell\", \"progenito… ## $ assay                                    <chr> \"10x 3' v3\", \"10x 3' v3\", \"10… ## $ disease                                  <chr> \"normal\", \"normal\", \"normal\",… ## $ organism                                 <chr> \"Homo sapiens\", \"Homo sapiens… ## $ sex                                      <chr> \"female\", \"female\", \"female\",… ## $ tissue                                   <chr> \"upper outer quadrant of brea… ## $ self_reported_ethnicity                  <chr> \"European\", \"European\", \"Euro… ## $ development_stage                        <chr> \"human adult stage\", \"human a… cell_data |>     count(donor_id, development_stage, self_reported_ethnicity) ## # A tibble: 7 × 4 ##   donor_id                 development_stage       self_reported_ethnicity     n ##   <chr>                    <chr>                   <chr>                   <int> ## 1 D1                       35-year-old human stage European                 2303 ## 2 D11                      43-year-old human stage Chinese                  7454 ## 3 D2                       60-year-old human stage European                  864 ## 4 D3                       44-year-old human stage African American         2517 ## 5 D4                       42-year-old human stage European                 1771 ## 6 D5                       21-year-old human stage European                 2244 ## 7 pooled [D9,D7,D8,D10,D6] human adult stage       European                14543 cell_data |>     count(cell_type) ## # A tibble: 6 × 2 ##   cell_type                                    n ##   <chr>                                    <int> ## 1 B cell                                     215 ## 2 basal cell                                7040 ## 3 endocrine cell                              64 ## 4 endothelial cell of lymphatic vessel       133 ## 5 luminal epithelial cell of mammary gland  4257 ## 6 progenitor cell                          19987 cell_data |>     count(self_reported_ethnicity, cell_type) |>     tidyr::pivot_wider(                names_from = \"self_reported_ethnicity\",                values_from = \"n\"            ) ## # A tibble: 6 × 4 ##   cell_type                                `African American` Chinese European ##   <chr>                                                 <int>   <int>    <int> ## 1 B cell                                                    5      73      137 ## 2 basal cell                                              583    3367     3090 ## 3 endothelial cell of lymphatic vessel                     11      31       91 ## 4 luminal epithelial cell of mammary gland                809     187     3261 ## 5 progenitor cell                                        1109    3755    15123 ## 6 endocrine cell                                           NA      41       23"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"umap-visualization","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"UMAP visualization","title":"B. Using R to Understand Bioinformatic Results","text":"Use ‘UMAP’ columns visualize gene expression  Make interactive, mouse-‘tool tips’ ‘brushing’ selection","code":"library(ggplot2) plt <-     ggplot(cell_data) +     aes(UMAP_1, UMAP_2, color = cell_type) +     geom_point(pch = \".\") plt library(plotly) ggplotly(plt) |>     toWebGL()"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"genes","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"Genes","title":"B. Using R to Understand Bioinformatic Results","text":"Approximately 1/3rd flagged filtered. genes humans (NCBITaxon:9606) biotype ‘gene’. simple plot shows distribution log-transformed average expression gene","code":"## use `file.choose()` or similar for your own data sets row_data_csv <- system.file(package = \"XM2023\", \"scrnaseq-gene-data.csv\") row_data <- readr::read_csv(row_data_csv) row_data |>     glimpse() ## Rows: 33,234 ## Columns: 7 ## $ gene_id             <chr> \"ENSG00000243485\", \"ENSG00000237613\", \"ENSG0000018… ## $ feature_is_filtered <lgl> TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, T… ## $ feature_name        <chr> \"MIR1302-2HG\", \"FAM138A\", \"OR4F5\", \"RP11-34P13.7\",… ## $ feature_reference   <chr> \"NCBITaxon:9606\", \"NCBITaxon:9606\", \"NCBITaxon:960… ## $ feature_biotype     <chr> \"gene\", \"gene\", \"gene\", \"gene\", \"gene\", \"gene\", \"g… ## $ mean_expression     <dbl> 3.154972e-05, 0.000000e+00, 0.000000e+00, 2.208481… ## $ mean_log_expression <dbl> 0.0000218686, 0.0000000000, 0.0000000000, 0.001521… row_data |>     count(feature_is_filtered, feature_reference, feature_biotype) ## # A tibble: 2 × 4 ##   feature_is_filtered feature_reference feature_biotype     n ##   <lgl>               <chr>             <chr>           <int> ## 1 FALSE               NCBITaxon:9606    gene            22743 ## 2 TRUE                NCBITaxon:9606    gene            10491 row_data |>     filter(!feature_is_filtered) |>     ggplot() +     aes(x = mean_log_expression) +     geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"overview","dir":"Articles","previous_headings":"Bioconductor resources","what":"Overview","title":"B. Using R to Understand Bioinformatic Results","text":"Web site – https://bioconductor.org Available packages https://bioconductor.org/packages Package landing pages & vignettes, e.g., https://bioconductor.org/packages/scater Package installation Use CRAN package BiocManager Bioconductor, CRAN, github packages Support site – https://support.bioconductor.org slack – sign - https://slack.bioconductor.org/ Bug reports, e.g., bug.report(package = \"GenomicFeatures\") direct email maintainers maintainer(\"GenomicFeatures\") Source code https://git.bioconductor.org git clone https://git.bioconductor.org/packages/GenomicFeatures https://code.bioconductor.org resources Orchestrating Single-Cell Analysis Bioconductor","code":"if (!\"BiocManager\" %in% rownames(installed.packages()))     install.packages(\"BiocManager\", repos = \"https://cran.R-project.org\") BiocManager::install(\"GenomicFeatures\")"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"annotations","dir":"Articles","previous_headings":"Bioconductor resources","what":"Annotations","title":"B. Using R to Understand Bioinformatic Results","text":"row_data, know Ensembl gene id, else can learn genes? number ‘tables’ data EnsDb; check browseVignettes(\"ensembldb\") information. E.g., add information unfiltered gene row_data. get gene annotations EnsDB object left_join() filtered row_data gene_annotations (.e., keep rows filtered row data, add columns matching rows gene_annotations) Many annotation resources available, help place information genes biological context.","code":"library(AnnotationHub) ah <- AnnotationHub() query(ah, c(\"EnsDb\", \"Homo sapiens\")) ## AnnotationHub with 24 records ## # snapshotDate(): 2023-05-15 ## # $dataprovider: Ensembl ## # $species: Homo sapiens ## # $rdataclass: EnsDb ## # additional mcols(): taxonomyid, genome, description, ## #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags, ## #   rdatapath, sourceurl, sourcetype  ## # retrieve records with, e.g., 'object[[\"AH53211\"]]'  ##  ##              title                              ##   AH53211  | Ensembl 87 EnsDb for Homo Sapiens  ##   AH53715  | Ensembl 88 EnsDb for Homo Sapiens  ##   AH56681  | Ensembl 89 EnsDb for Homo Sapiens  ##   AH57757  | Ensembl 90 EnsDb for Homo Sapiens  ##   AH60773  | Ensembl 91 EnsDb for Homo Sapiens  ##   ...        ...                                ##   AH98047  | Ensembl 105 EnsDb for Homo sapiens ##   AH100643 | Ensembl 106 EnsDb for Homo sapiens ##   AH104864 | Ensembl 107 EnsDb for Homo sapiens ##   AH109336 | Ensembl 108 EnsDb for Homo sapiens ##   AH109606 | Ensembl 109 EnsDb for Homo sapiens ensdb109 <- ah[[\"AH109606\"]] ## loading from cache ## require(\"ensembldb\") ensdb109 ## EnsDb for Ensembl: ## |Backend: SQLite ## |Db type: EnsDb ## |Type of Gene ID: Ensembl Gene ID ## |Supporting package: ensembldb ## |Db created by: ensembldb package from Bioconductor ## |script_version: 0.3.10 ## |Creation time: Thu Feb 16 12:36:05 2023 ## |ensembl_version: 109 ## |ensembl_host: localhost ## |Organism: Homo sapiens ## |taxonomy_id: 9606 ## |genome_build: GRCh38 ## |DBSCHEMAVERSION: 2.2 ## |common_name: human ## |species: homo_sapiens ## | No. of genes: 70623. ## | No. of transcripts: 276218. ## |Protein data available. names(listTables(ensdb109)) ##  [1] \"gene\"           \"tx\"             \"tx2exon\"        \"exon\"           ##  [5] \"chromosome\"     \"protein\"        \"uniprot\"        \"protein_domain\" ##  [9] \"entrezgene\"     \"metadata\" gene_annotations <-     genes(         ensdb109,         filter = ~ gene_biotype == \"protein_coding\",         return.type = \"DataFrame\"     ) |>     as_tibble() row_data |>     dplyr::filter(!feature_is_filtered) |>     left_join(gene_annotations) ## Joining with `by = join_by(gene_id)` ## # A tibble: 22,743 × 19 ##    gene_id    feature_is_filtered feature_name feature_reference feature_biotype ##    <chr>      <lgl>               <chr>        <chr>             <chr>           ##  1 ENSG00000… FALSE               RP11-34P13.7 NCBITaxon:9606    gene            ##  2 ENSG00000… FALSE               LINC01409    NCBITaxon:9606    gene            ##  3 ENSG00000… FALSE               FAM87B       NCBITaxon:9606    gene            ##  4 ENSG00000… FALSE               LINC00115    NCBITaxon:9606    gene            ##  5 ENSG00000… FALSE               FAM41C       NCBITaxon:9606    gene            ##  6 ENSG00000… FALSE               RP11-54O7.1  NCBITaxon:9606    gene            ##  7 ENSG00000… FALSE               LINC02593    NCBITaxon:9606    gene            ##  8 ENSG00000… FALSE               SAMD11       NCBITaxon:9606    gene            ##  9 ENSG00000… FALSE               NOC2L        NCBITaxon:9606    gene            ## 10 ENSG00000… FALSE               KLHL17       NCBITaxon:9606    gene            ## # ℹ 22,733 more rows ## # ℹ 14 more variables: mean_expression <dbl>, mean_log_expression <dbl>, ## #   gene_name <chr>, gene_biotype <chr>, gene_seq_start <int>, ## #   gene_seq_end <int>, seq_name <chr>, seq_strand <int>, ## #   seq_coord_system <chr>, description <chr>, gene_id_version <chr>, ## #   canonical_transcript <chr>, symbol <chr>, entrezid <named list>"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"more-to-come","dir":"Articles","previous_headings":"","what":"More to come…","title":"B. Using R to Understand Bioinformatic Results","text":"Tomorrow Discover single-cell data sets CELLxGENE data portal Download import data sets ‘Seurat’ ‘SingleCellExperiment’ objects. Coordinate cell annotation gene annotation","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"B. Using R to Understand Bioinformatic Results","text":"Packages Provide robust way document requirements analysis, organize complicated analyses distinct steps. ’ve found pkgdown useful presenting packages users. instance, material workshop available pkgdown. Vignettes Explict description analysis steps (good bioinformatician), coupled text graphics (good collaboration). Git Incremental ‘commits’ analysis progresses. Commits allow confident exploration – last commit always available ‘start ’. Tags allow checkpointing analysis, e.g., version analysis used original manuscript submission; version analysis associated revision final publciation. Containers fully reproducible analysis challenging implement – specifying software version enough, easy future investigator re-establish. Containers like docker singularity provide one mechanism creating ‘snapshot’ capturing exactly software used. Beware! Complicated containers might result fully reproducible analysis, provide little confidence robustness analysis.","code":"devtools::create(\"MyAnalysis\") setwd(\"MyAnalysis\") usethis::use_vignette(\"a_data_management\", \"A. Data management\") usethis::use_vignette(\"b_exploratory_visualization\", \"B. Exploration\") usethis::use_pkgdown() pkgdown::build_site()"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"B. Using R to Understand Bioinformatic Results","text":"document produced following R software:","code":"sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    parallel  stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] ensembldb_2.25.0        AnnotationFilter_1.25.0 GenomicFeatures_1.53.0  ##  [4] AnnotationDbi_1.63.1    Biobase_2.61.0          GenomicRanges_1.53.1    ##  [7] GenomeInfoDb_1.37.1     IRanges_2.35.1          S4Vectors_0.39.1        ## [10] AnnotationHub_3.9.1     BiocFileCache_2.9.0     dbplyr_2.3.2            ## [13] BiocGenerics_0.47.0     plotly_4.10.2           ggplot2_3.4.2           ## [16] dplyr_1.1.2             ##  ## loaded via a namespace (and not attached): ##   [1] jsonlite_1.8.5                magrittr_2.0.3                ##   [3] farver_2.1.1                  rmarkdown_2.22                ##   [5] fs_1.6.2                      BiocIO_1.11.0                 ##   [7] zlibbioc_1.47.0               ragg_1.2.5                    ##   [9] vctrs_0.6.2                   memoise_2.0.1                 ##  [11] Rsamtools_2.17.0              RCurl_1.98-1.12               ##  [13] htmltools_0.5.5               S4Arrays_1.1.4                ##  [15] progress_1.2.2                curl_5.0.1                    ##  [17] SparseArray_1.1.9             sass_0.4.6                    ##  [19] bslib_0.5.0                   htmlwidgets_1.6.2             ##  [21] desc_1.4.2                    cachem_1.0.8                  ##  [23] GenomicAlignments_1.37.0      mime_0.12                     ##  [25] lifecycle_1.0.3               pkgconfig_2.0.3               ##  [27] Matrix_1.5-4.1                R6_2.5.1                      ##  [29] fastmap_1.1.1                 GenomeInfoDbData_1.2.10       ##  [31] MatrixGenerics_1.13.0         shiny_1.7.4                   ##  [33] digest_0.6.31                 colorspace_2.1-0              ##  [35] rprojroot_2.0.3               textshaping_0.3.6             ##  [37] crosstalk_1.2.0               RSQLite_2.3.1                 ##  [39] filelock_1.0.2                labeling_0.4.2                ##  [41] fansi_1.0.4                   httr_1.4.6                    ##  [43] mgcv_1.8-42                   compiler_4.3.0                ##  [45] bit64_4.0.5                   withr_2.5.0                   ##  [47] BiocParallel_1.35.2           DBI_1.1.3                     ##  [49] highr_0.10                    biomaRt_2.57.1                ##  [51] rappdirs_0.3.3                DelayedArray_0.27.4           ##  [53] rjson_0.2.21                  tools_4.3.0                   ##  [55] interactiveDisplayBase_1.39.0 httpuv_1.6.11                 ##  [57] glue_1.6.2                    restfulr_0.0.15               ##  [59] nlme_3.1-162                  promises_1.2.0.1              ##  [61] grid_4.3.0                    generics_0.1.3                ##  [63] gtable_0.3.3                  tzdb_0.4.0                    ##  [65] tidyr_1.3.0                   data.table_1.14.8             ##  [67] hms_1.1.3                     xml2_1.3.4                    ##  [69] utf8_1.2.3                    XVector_0.41.1                ##  [71] BiocVersion_3.18.0            pillar_1.9.0                  ##  [73] stringr_1.5.0                 vroom_1.6.3                   ##  [75] later_1.3.1                   splines_4.3.0                 ##  [77] lattice_0.21-8                rtracklayer_1.61.0            ##  [79] bit_4.0.5                     tidyselect_1.2.0              ##  [81] Biostrings_2.69.1             knitr_1.43                    ##  [83] ProtGenerics_1.33.0           SummarizedExperiment_1.31.1   ##  [85] xfun_0.39                     matrixStats_1.0.0             ##  [87] stringi_1.7.12                lazyeval_0.2.2                ##  [89] yaml_2.3.7                    evaluate_0.21                 ##  [91] codetools_0.2-19              tibble_3.2.1                  ##  [93] BiocManager_1.30.21           cli_3.6.1                     ##  [95] xtable_1.8-4                  systemfonts_1.0.4             ##  [97] munsell_0.5.0                 jquerylib_0.1.4               ##  [99] Rcpp_1.0.10                   png_0.1-8                     ## [101] XML_3.99-0.14                 ellipsis_0.3.2                ## [103] pkgdown_2.0.7                 readr_2.1.4                   ## [105] blob_1.2.4                    prettyunits_1.1.1             ## [107] bitops_1.0-7                  viridisLite_0.4.2             ## [109] scales_1.2.1                  purrr_1.0.1                   ## [111] crayon_1.5.2                  rlang_1.1.1                   ## [113] KEGGREST_1.41.0"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_course_part_2.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"C. R / Bioconductor for Genomic Analysis","text":"document produced following R software:","code":"sessionInfo() #> R version 4.3.0 (2023-04-21) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.2       cli_3.6.1         knitr_1.43        rlang_1.1.1       #>  [5] xfun_0.39         stringi_1.7.12    purrr_1.0.1       textshaping_0.3.6 #>  [9] jsonlite_1.8.5    glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.5   #> [13] ragg_1.2.5        sass_0.4.6        rmarkdown_2.22    evaluate_0.21     #> [17] jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   #> [21] memoise_2.0.1     stringr_1.5.0     compiler_4.3.0    fs_1.6.2          #> [25] systemfonts_1.0.4 digest_0.6.31     R6_2.5.1          magrittr_2.0.3    #> [29] bslib_0.5.0       tools_4.3.0       pkgdown_2.0.7     cachem_1.0.8      #> [33] desc_1.4.2"},{"path":"https://mtmorgan.github.io/XM2023/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. NIH NHGRI U24HG004059. Funder.","code":""},{"path":"https://mtmorgan.github.io/XM2023/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). XM2023: Talk Short Course Material R / Bioconductor XM2023. R package version 0.0.0.9004, https://mtmorgan.github.io/XM2023/.","code":"@Manual{,   title = {XM2023: Talk and Short Course Material for R / Bioconductor XM2023},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9004},   url = {https://mtmorgan.github.io/XM2023/}, }"},{"path":"https://mtmorgan.github.io/XM2023/index.html","id":"xm2023--brazilian-association-for-bioinformatics-and-computational-biology","dir":"","previous_headings":"","what":"Talk and Short Course Material for R / Bioconductor XM2023","title":"Talk and Short Course Material for R / Bioconductor XM2023","text":"resource includes material presented XM2023, international conference Brazilian Association Bioinformatics Computational Biology, held Curitiba Paraná, 13 16 June 2023. Dr. Morgan presented talk two short courses. talk addressed contribution future Bioconductor. . Bioconductor Advances Science Two short workshops illustrate use R Bioconductor genomic analysis, emphasizing modern single-cell approaches. first workshop introduces R, explores essential data management tasks (instance summarizing cell types plotting ‘UMAP’ single-cell RNASeq experiment) using ‘tidy’ paradigm. previous experience R required. second workshop walks single-cell RNAseq analysis using R Bioconductor packages. Users familiar R benefit workshop, users levels able follow along. B. Using R Understand Bioinformatic Results C. R / Bioconductor Genomic Analysis","code":""}]
