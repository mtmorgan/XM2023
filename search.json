[{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"essential-r","dir":"Articles","previous_headings":"","what":"Essential R","title":"B. Using R to Understand Bioinformatic Results","text":"simple calculator ‘Vectors’ building blocks Variables, missing values ‘factors’ Data structures coordinate related vectors – data.frame Key opererations data.frame df[1:3, c(\"gender\", \"age\")] – subset rows columns df[[\"age\"]], df$age – select columns Functions   ‘Vectorized’ operations, e.g., element-wise addition without explicit ‘’ loop  Write functions Iterate, usually lapply() although () available","code":"1 + 1 ## [1] 2 c(1, 2, 3) ## [1] 1 2 3 c(\"January\", \"February\", \"March\") ## [1] \"January\"  \"February\" \"March\" c(TRUE, FALSE) ## [1]  TRUE FALSE age <- c(27, NA, 32, 29) gender <- factor(     c(\"Female\", \"Male\", \"Non-binary\", NA),     levels = c(\"Female\", \"Male\", \"Non-binary\") ) df <- data.frame(     age = c(27, NA, 32, 29),     gender = gender ) df ##   age     gender ## 1  27     Female ## 2  NA       Male ## 3  32 Non-binary ## 4  29       <NA> rnorm(5)        # 5 random normal deviates ## [1]  0.847364  0.957958 -1.020578  2.059772 -1.440869 x <- rnorm(100) # 100 random normal deviates hist(x)         # histogram, approximately normal plot(density(x)) # a little more sophisticated? y <- x + rnorm(100) plot(y ~ x) fit <- lm(y ~ x) fit         # an R 'object' containing information about the ##  ## Call: ## lm(formula = y ~ x) ##  ## Coefficients: ## (Intercept)            x   ##    -0.06163      0.88050             # regression of y on x abline(fit) # plot points and fitted regression line anova(fit)  # statistical summary of linear regression ## Analysis of Variance Table ##  ## Response: y ##           Df Sum Sq Mean Sq F value    Pr(>F)     ## x          1 74.467  74.467  86.257 4.261e-15 *** ## Residuals 98 84.604   0.863                       ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 hello <- function(who) {     paste(\"hello\", who, \"with\", nchar(who), \"letters in your name\") } hello(\"Martin\") ## [1] \"hello Martin with 6 letters in your name\" names <- c(\"Martin\", \"Thomas\") lapply(names, hello) ## [[1]] ## [1] \"hello Martin with 6 letters in your name\" ##  ## [[2]] ## [1] \"hello Thomas with 6 letters in your name\""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"B. Using R to Understand Bioinformatic Results","text":"Extend functionality base R. Can part ‘base’ distribution…","code":"## iterate over the numbers 1 through 8, 'sleeping' for 1 second ## each. Takes about 8 seconds... system.time({     lapply(1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.002   0.000   8.010  ## sleep in parallel -- takes only 2 seconds library(parallel) cl <- makeCluster(4) # cluster of 4 workers system.time({     parLapply(cl, 1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.002   0.000   2.085"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"tidyverse","dir":"Articles","previous_headings":"Packages","what":"Tidyverse","title":"B. Using R to Understand Bioinformatic Results","text":"dplyr package introduces ‘tidyverse’ ‘tibble’ like ‘data.frame’, user-friendly tidyverse makes use ‘pipes’ |> (older syntax %>%). pipe takes left-hand side pass right-hand side. Key dplyr ‘verbs’ can piped together tibble() – representation data.frame, better display long wide data frames. tribble() constructs tibble way makes relationship data across rows transparent. glimpse() – providing quick look columns data tibble transposing tibble display ‘column’ single line. select() – column selection. filter(), slice() – row selection. pull() – extract single column vector. mutate() – column transformation. count() – count occurences one columns. arrange() – order rows values one columns. distinct() – reduce tibble unique rows. group_by() – perform computations groups defined one several columns. summarize() – calculate summary statstics groups. left_join(), right_join(), inner_join() – merge two tibbles based shared columns, preserving rows first (left_join()) second (right_join()) (inner_join()) tibble. ‘classic’ built-data set – Motor Trend ‘cars’ 1974… ‘tidyverse’ eschews rownames, make column. Use group_by() summarize group (cyl). n() function dplyr returns number records group.","code":"library(dplyr) tbl <- tibble(     x = rnorm(100),     y = x + rnorm(100) )  ## e.g., only displays the first 10 rows tbl ## # A tibble: 100 × 2 ##           x       y ##       <dbl>   <dbl> ##  1 -0.238   -0.0534 ##  2  0.805    1.01   ##  3  1.24     1.47   ##  4  0.857    2.46   ##  5 -0.376    0.0375 ##  6  1.04     1.99   ##  7  1.57     1.99   ##  8  0.00328  1.28   ##  9 -0.538   -0.0890 ## 10 -0.475    0.869  ## # ℹ 90 more rows tbl |>     ## e.g., just rows with non-negative values of x and y     filter(x > 0, y > 0) |>     ## add a column     mutate(distance_from_origin = sqrt(x^2 + y^2)) ## # A tibble: 30 × 3 ##          x     y distance_from_origin ##      <dbl> <dbl>                <dbl> ##  1 0.805   1.01                 1.29  ##  2 1.24    1.47                 1.92  ##  3 0.857   2.46                 2.61  ##  4 1.04    1.99                 2.25  ##  5 1.57    1.99                 2.54  ##  6 0.00328 1.28                 1.28  ##  7 0.920   1.18                 1.50  ##  8 0.114   0.881                0.889 ##  9 0.229   0.720                0.756 ## 10 0.494   0.542                0.733 ## # ℹ 20 more rows mtcars_tbl <-     mtcars |>     as_tibble(rownames = \"model\") |>     mutate(cyl = factor(cyl)) mtcars_tbl ## # A tibble: 32 × 12 ##    model         mpg cyl    disp    hp  drat    wt  qsec    vs    am  gear  carb ##    <chr>       <dbl> <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> ##  1 Mazda RX4    21   6      160    110  3.9   2.62  16.5     0     1     4     4 ##  2 Mazda RX4 …  21   6      160    110  3.9   2.88  17.0     0     1     4     4 ##  3 Datsun 710   22.8 4      108     93  3.85  2.32  18.6     1     1     4     1 ##  4 Hornet 4 D…  21.4 6      258    110  3.08  3.22  19.4     1     0     3     1 ##  5 Hornet Spo…  18.7 8      360    175  3.15  3.44  17.0     0     0     3     2 ##  6 Valiant      18.1 6      225    105  2.76  3.46  20.2     1     0     3     1 ##  7 Duster 360   14.3 8      360    245  3.21  3.57  15.8     0     0     3     4 ##  8 Merc 240D    24.4 4      147.    62  3.69  3.19  20       1     0     4     2 ##  9 Merc 230     22.8 4      141.    95  3.92  3.15  22.9     1     0     4     2 ## 10 Merc 280     19.2 6      168.   123  3.92  3.44  18.3     1     0     4     4 ## # ℹ 22 more rows  mtcars_tbl |>     group_by(cyl) |>     summarize(         n = n(),         mean_mpg = mean(mpg, na.rm = TRUE),         var_mpg = var(mpg, na.rm = TRUE)     ) ## # A tibble: 3 × 4 ##   cyl       n mean_mpg var_mpg ##   <fct> <int>    <dbl>   <dbl> ## 1 4        11     26.7   20.3  ## 2 6         7     19.7    2.11 ## 3 8        14     15.1    6.55"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"visualization","dir":"Articles","previous_headings":"Packages","what":"Visualization","title":"B. Using R to Understand Bioinformatic Results","text":"Another example contributed package ggplot2 visualization  Check plotly, especially interactive visualization (e.g., ‘tooltips’ mousing points, dragging subset zoom )","code":"library(ggplot2) ggplot(tbl) +     aes(x, y) +                # use 'x' and 'y' columns for plotting...     geom_point() +             # ...plot points...     geom_smooth(method = \"lm\") # ...linear regresion library(plotly) plt <-     ggplot(mtcars_tbl) +     aes(x = cyl, y = mpg, text = model) +     geom_jitter(width = .25) +     geom_boxplot() ggplotly(plt)"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"where-do-packages-come-from","dir":"Articles","previous_headings":"Packages","what":"Where do Packages Come From?","title":"B. Using R to Understand Bioinformatic Results","text":"CRAN: Comprehensive R Archive Network. 18,000 packages. help CRAN Task Views identifying relevant packages. Bioconductor: 2100 packages relevant high-throughput genomic analysis. Vignettes important part Bioconductor packages. Install packages per R installation, using BiocManager::install(<package-name>) (CRAN Bioconductor) GitHub? Packages haven’t checked formal system, may incomplete code, documentation, dependencies packages, etc. Authors may yet committed long-term maintenance package.","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"help-vignettes","dir":"Articles","previous_headings":"Packages","what":"Help & Vignettes","title":"B. Using R to Understand Bioinformatic Results","text":"Help pages, e.g., ?lm Vignettes, e.g., Google, StackOverflow, etc…","code":"vignette(package = \"ggplot2\") vignette(\"ggplot2-specs\", \"ggplot2\")"},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"cell-summary","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"Cell summary","title":"B. Using R to Understand Bioinformatic Results","text":"Read ‘csv’ file summarizing infomration cell experiment. Summarize information – many donors, developmental stage, ethnicity? cell types annotated? Cell types ethnicity? Reflecting – replication across non-European ethnicity, statistical insights available. Pooled samples probably require careful treatment downstream analysis.","code":"## use `file.choose()` or similar for your own data sets cell_data_csv <- system.file(package = \"XM2023\", \"scrnaseq-cell-data.csv\") cell_data <- readr::read_csv(cell_data_csv) cell_data |>     glimpse() ## Rows: 31,696 ## Columns: 37 ## $ cell_id                                  <chr> \"CMGpool_AAACCCAAGGACAACC\", \"… ## $ UMAP_1                                   <dbl> -5.9931696, -6.7217583, -9.01… ## $ UMAP_2                                   <dbl> -1.9311870, -1.3059803, -3.39… ## $ donor_id                                 <chr> \"pooled [D9,D7,D8,D10,D6]\", \"… ## $ self_reported_ethnicity_ontology_term_id <chr> \"HANCESTRO:0005\", \"HANCESTRO:… ## $ donor_BMI                                <chr> \"pooled [30.5,22.7,23.5,26.8,… ## $ donor_times_pregnant                     <chr> \"pooled [3,0,3,2,2]\", \"pooled… ## $ family_history_breast_cancer             <chr> \"pooled [unknown,False,False,… ## $ organism_ontology_term_id                <chr> \"NCBITaxon:9606\", \"NCBITaxon:… ## $ tyrer_cuzick_lifetime_risk               <chr> \"pooled [12,14.8,8.8,14.3,20.… ## $ sample_uuid                              <chr> \"pooled [f008c67a-abb4-4563-8… ## $ sample_preservation_method               <chr> \"cryopreservation\", \"cryopres… ## $ tissue_ontology_term_id                  <chr> \"UBERON:0035328\", \"UBERON:003… ## $ development_stage_ontology_term_id       <chr> \"HsapDv:0000087\", \"HsapDv:000… ## $ suspension_uuid                          <chr> \"38d793cb-d811-4863-aec0-2fa7… ## $ suspension_type                          <chr> \"cell\", \"cell\", \"cell\", \"cell… ## $ library_uuid                             <chr> \"385d8d7c-5038-4f0e-b7f3-ec9a… ## $ assay_ontology_term_id                   <chr> \"EFO:0009922\", \"EFO:0009922\",… ## $ mapped_reference_annotation              <chr> \"GENCODE 28\", \"GENCODE 28\", \"… ## $ is_primary_data                          <lgl> TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ cell_type_ontology_term_id               <chr> \"CL:0011026\", \"CL:0011026\", \"… ## $ author_cell_type                         <chr> \"luminal progenitor\", \"lumina… ## $ disease_ontology_term_id                 <chr> \"PATO:0000461\", \"PATO:0000461… ## $ sex_ontology_term_id                     <chr> \"PATO:0000383\", \"PATO:0000383… ## $ nCount_RNA                               <dbl> 2937, 5495, 5598, 3775, 2146,… ## $ nFeature_RNA                             <dbl> 1183, 1827, 2037, 1448, 1027,… ## $ percent.mito                             <dbl> 0.02076949, 0.03676069, 0.043… ## $ seurat_clusters                          <dbl> 3, 3, 24, 1, 3, 1, 1, 4, 1, 0… ## $ sample_id                                <chr> \"CMGpool\", \"CMGpool\", \"CMGpoo… ## $ cell_type                                <chr> \"progenitor cell\", \"progenito… ## $ assay                                    <chr> \"10x 3' v3\", \"10x 3' v3\", \"10… ## $ disease                                  <chr> \"normal\", \"normal\", \"normal\",… ## $ organism                                 <chr> \"Homo sapiens\", \"Homo sapiens… ## $ sex                                      <chr> \"female\", \"female\", \"female\",… ## $ tissue                                   <chr> \"upper outer quadrant of brea… ## $ self_reported_ethnicity                  <chr> \"European\", \"European\", \"Euro… ## $ development_stage                        <chr> \"human adult stage\", \"human a… cell_data |>     count(donor_id, development_stage, self_reported_ethnicity) ## # A tibble: 7 × 4 ##   donor_id                 development_stage       self_reported_ethnicity     n ##   <chr>                    <chr>                   <chr>                   <int> ## 1 D1                       35-year-old human stage European                 2303 ## 2 D11                      43-year-old human stage Chinese                  7454 ## 3 D2                       60-year-old human stage European                  864 ## 4 D3                       44-year-old human stage African American         2517 ## 5 D4                       42-year-old human stage European                 1771 ## 6 D5                       21-year-old human stage European                 2244 ## 7 pooled [D9,D7,D8,D10,D6] human adult stage       European                14543 cell_data |>     count(cell_type) ## # A tibble: 6 × 2 ##   cell_type                                    n ##   <chr>                                    <int> ## 1 B cell                                     215 ## 2 basal cell                                7040 ## 3 endocrine cell                              64 ## 4 endothelial cell of lymphatic vessel       133 ## 5 luminal epithelial cell of mammary gland  4257 ## 6 progenitor cell                          19987 cell_data |>     count(self_reported_ethnicity, cell_type) |>     tidyr::pivot_wider(                names_from = \"self_reported_ethnicity\",                values_from = \"n\"            ) ## # A tibble: 6 × 4 ##   cell_type                                `African American` Chinese European ##   <chr>                                                 <int>   <int>    <int> ## 1 B cell                                                    5      73      137 ## 2 basal cell                                              583    3367     3090 ## 3 endothelial cell of lymphatic vessel                     11      31       91 ## 4 luminal epithelial cell of mammary gland                809     187     3261 ## 5 progenitor cell                                        1109    3755    15123 ## 6 endocrine cell                                           NA      41       23"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"umap-visualization","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"UMAP visualization","title":"B. Using R to Understand Bioinformatic Results","text":"Use ‘UMAP’ columns visualize gene expression  Make interactive, mouse-‘tool tips’ ‘brushing’ selection","code":"library(ggplot2) plt <-     ggplot(cell_data) +     aes(UMAP_1, UMAP_2, color = cell_type) +     geom_point(pch = \".\") plt library(plotly) ggplotly(plt) |>     toWebGL()"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"genes","dir":"Articles","previous_headings":"Bioinformatics – scRNA-seq","what":"Genes","title":"B. Using R to Understand Bioinformatic Results","text":"Approximately 1/3rd flagged filtered. genes humans (NCBITaxon:9606) biotype ‘gene’. simple plot shows distribution log-transformed average expression gene","code":"## use `file.choose()` or similar for your own data sets row_data_csv <- system.file(package = \"XM2023\", \"scrnaseq-gene-data.csv\") row_data <- readr::read_csv(row_data_csv) row_data |>     glimpse() ## Rows: 33,234 ## Columns: 7 ## $ gene_id             <chr> \"ENSG00000243485\", \"ENSG00000237613\", \"ENSG0000018… ## $ feature_is_filtered <lgl> TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, T… ## $ feature_name        <chr> \"MIR1302-2HG\", \"FAM138A\", \"OR4F5\", \"RP11-34P13.7\",… ## $ feature_reference   <chr> \"NCBITaxon:9606\", \"NCBITaxon:9606\", \"NCBITaxon:960… ## $ feature_biotype     <chr> \"gene\", \"gene\", \"gene\", \"gene\", \"gene\", \"gene\", \"g… ## $ mean_expression     <dbl> 3.154972e-05, 0.000000e+00, 0.000000e+00, 2.208481… ## $ mean_log_expression <dbl> 0.0000218686, 0.0000000000, 0.0000000000, 0.001521… row_data |>     count(feature_is_filtered, feature_reference, feature_biotype) ## # A tibble: 2 × 4 ##   feature_is_filtered feature_reference feature_biotype     n ##   <lgl>               <chr>             <chr>           <int> ## 1 FALSE               NCBITaxon:9606    gene            22743 ## 2 TRUE                NCBITaxon:9606    gene            10491 row_data |>     filter(!feature_is_filtered) |>     ggplot() +     aes(x = mean_log_expression) +     geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"overview","dir":"Articles","previous_headings":"Bioconductor resources","what":"Overview","title":"B. Using R to Understand Bioinformatic Results","text":"Web site – https://bioconductor.org Available packages https://bioconductor.org/packages Package landing pages & vignettes, e.g., https://bioconductor.org/packages/scater Package installation Use CRAN package BiocManager Bioconductor, CRAN, github packages Support site – https://support.bioconductor.org slack – sign - https://slack.bioconductor.org/ Bug reports, e.g., bug.report(package = \"GenomicFeatures\") direct email maintainers maintainer(\"GenomicFeatures\") Source code https://git.bioconductor.org git clone https://git.bioconductor.org/packages/GenomicFeatures https://code.bioconductor.org resources Orchestrating Single-Cell Analysis Bioconductor","code":"if (!\"BiocManager\" %in% rownames(installed.packages()))     install.packages(\"BiocManager\", repos = \"https://cran.R-project.org\") BiocManager::install(\"GenomicFeatures\")"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"annotations","dir":"Articles","previous_headings":"Bioconductor resources","what":"Annotations","title":"B. Using R to Understand Bioinformatic Results","text":"row_data, know Ensembl gene id, else can learn genes? number ‘tables’ data EnsDb; check browseVignettes(\"ensembldb\") information. E.g., add information unfiltered gene row_data. get gene annotations EnsDB object left_join() filtered row_data gene_annotations (.e., keep rows filtered row data, add columns matching rows gene_annotations) Many annotation resources available, help place information genes biological context.","code":"library(AnnotationHub) ah <- AnnotationHub() query(ah, c(\"EnsDb\", \"Homo sapiens\")) ## AnnotationHub with 24 records ## # snapshotDate(): 2023-05-15 ## # $dataprovider: Ensembl ## # $species: Homo sapiens ## # $rdataclass: EnsDb ## # additional mcols(): taxonomyid, genome, description, ## #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags, ## #   rdatapath, sourceurl, sourcetype  ## # retrieve records with, e.g., 'object[[\"AH53211\"]]'  ##  ##              title                              ##   AH53211  | Ensembl 87 EnsDb for Homo Sapiens  ##   AH53715  | Ensembl 88 EnsDb for Homo Sapiens  ##   AH56681  | Ensembl 89 EnsDb for Homo Sapiens  ##   AH57757  | Ensembl 90 EnsDb for Homo Sapiens  ##   AH60773  | Ensembl 91 EnsDb for Homo Sapiens  ##   ...        ...                                ##   AH98047  | Ensembl 105 EnsDb for Homo sapiens ##   AH100643 | Ensembl 106 EnsDb for Homo sapiens ##   AH104864 | Ensembl 107 EnsDb for Homo sapiens ##   AH109336 | Ensembl 108 EnsDb for Homo sapiens ##   AH109606 | Ensembl 109 EnsDb for Homo sapiens ensdb109 <- ah[[\"AH109606\"]] ## loading from cache ## require(\"ensembldb\") ensdb109 ## EnsDb for Ensembl: ## |Backend: SQLite ## |Db type: EnsDb ## |Type of Gene ID: Ensembl Gene ID ## |Supporting package: ensembldb ## |Db created by: ensembldb package from Bioconductor ## |script_version: 0.3.10 ## |Creation time: Thu Feb 16 12:36:05 2023 ## |ensembl_version: 109 ## |ensembl_host: localhost ## |Organism: Homo sapiens ## |taxonomy_id: 9606 ## |genome_build: GRCh38 ## |DBSCHEMAVERSION: 2.2 ## |common_name: human ## |species: homo_sapiens ## | No. of genes: 70623. ## | No. of transcripts: 276218. ## |Protein data available. names(listTables(ensdb109)) ##  [1] \"gene\"           \"tx\"             \"tx2exon\"        \"exon\"           ##  [5] \"chromosome\"     \"protein\"        \"uniprot\"        \"protein_domain\" ##  [9] \"entrezgene\"     \"metadata\" gene_annotations <-     genes(         ensdb109,         filter = ~ gene_biotype == \"protein_coding\",         return.type = \"DataFrame\"     ) |>     as_tibble() row_data |>     dplyr::filter(!feature_is_filtered) |>     left_join(gene_annotations) ## Joining with `by = join_by(gene_id)` ## # A tibble: 22,743 × 19 ##    gene_id    feature_is_filtered feature_name feature_reference feature_biotype ##    <chr>      <lgl>               <chr>        <chr>             <chr>           ##  1 ENSG00000… FALSE               RP11-34P13.7 NCBITaxon:9606    gene            ##  2 ENSG00000… FALSE               LINC01409    NCBITaxon:9606    gene            ##  3 ENSG00000… FALSE               FAM87B       NCBITaxon:9606    gene            ##  4 ENSG00000… FALSE               LINC00115    NCBITaxon:9606    gene            ##  5 ENSG00000… FALSE               FAM41C       NCBITaxon:9606    gene            ##  6 ENSG00000… FALSE               RP11-54O7.1  NCBITaxon:9606    gene            ##  7 ENSG00000… FALSE               LINC02593    NCBITaxon:9606    gene            ##  8 ENSG00000… FALSE               SAMD11       NCBITaxon:9606    gene            ##  9 ENSG00000… FALSE               NOC2L        NCBITaxon:9606    gene            ## 10 ENSG00000… FALSE               KLHL17       NCBITaxon:9606    gene            ## # ℹ 22,733 more rows ## # ℹ 14 more variables: mean_expression <dbl>, mean_log_expression <dbl>, ## #   gene_name <chr>, gene_biotype <chr>, gene_seq_start <int>, ## #   gene_seq_end <int>, seq_name <chr>, seq_strand <int>, ## #   seq_coord_system <chr>, description <chr>, gene_id_version <chr>, ## #   canonical_transcript <chr>, symbol <chr>, entrezid <named list>"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"experiments","dir":"Articles","previous_headings":"Bioconductor resources","what":"Experiments","title":"B. Using R to Understand Bioinformatic Results","text":"Bioconductor provides ‘experiment’ data addition software packages annotation resources. Experiment data includes datasets used training purposes; often made available package. Load MouseGastrulationData package example single cell experiment Use colData() dplyr explore cell annotations Use counts() accessor obtain genes x cells matrix counts reads mapped gene. Use colSums() base graphics hist() summarize number reads per cell.  Likewise summarizing log + 1 reads per gene, using ‘pipes’  row data contains just Ensembl gene symbol annotations. ‘MouseGastrulationData’ vignette, experiment used Ensembl mouse annotations, version 92. Discover retrieve annotations using AnnotationHub Check ensembldb vignette. Retrieve additional annotations available genes Use filter identify genes chromosome 1, row names sce Finally, subset SingleCellExperiment contain just genes chromsoome 1.","code":"library(MouseGastrulationData) sce <- WTChimeraData(samples=5:10) sce ## class: SingleCellExperiment  ## dim: 29453 20935  ## metadata(0): ## assays(1): counts ## rownames(29453): ENSMUSG00000051951 ENSMUSG00000089699 ... ##   ENSMUSG00000095742 tomato-td ## rowData names(2): ENSEMBL SYMBOL ## colnames(20935): cell_9769 cell_9770 ... cell_30702 cell_30703 ## colData names(11): cell barcode ... doub.density sizeFactor ## reducedDimNames(2): pca.corrected.E7.5 pca.corrected.E8.5 ## mainExpName: NULL ## altExpNames(0): colData(sce) ## DataFrame with 20935 rows and 11 columns ##                   cell          barcode    sample       stage    tomato ##            <character>      <character> <integer> <character> <logical> ## cell_9769    cell_9769 AAACCTGAGACTGTAA         5        E8.5      TRUE ## cell_9770    cell_9770 AAACCTGAGATGCCTT         5        E8.5      TRUE ## cell_9771    cell_9771 AAACCTGAGCAGCCTC         5        E8.5      TRUE ## cell_9772    cell_9772 AAACCTGCATACTCTT         5        E8.5      TRUE ## cell_9773    cell_9773 AAACGGGTCAACACCA         5        E8.5      TRUE ## ...                ...              ...       ...         ...       ... ## cell_30699  cell_30699 TTTGTCACAGCTCGCA        10        E8.5     FALSE ## cell_30700  cell_30700 TTTGTCAGTCTAGTCA        10        E8.5     FALSE ## cell_30701  cell_30701 TTTGTCATCATCGGAT        10        E8.5     FALSE ## cell_30702  cell_30702 TTTGTCATCATTATCC        10        E8.5     FALSE ## cell_30703  cell_30703 TTTGTCATCCCATTTA        10        E8.5     FALSE ##                 pool stage.mapped        celltype.mapped closest.cell ##            <integer>  <character>            <character>  <character> ## cell_9769          3        E8.25             Mesenchyme   cell_24159 ## cell_9770          3         E8.5            Endothelium   cell_96660 ## cell_9771          3         E8.5              Allantois  cell_134982 ## cell_9772          3         E8.5             Erythroid3  cell_133892 ## cell_9773          3        E8.25             Erythroid1   cell_76296 ## ...              ...          ...                    ...          ... ## cell_30699         5         E8.5             Erythroid3   cell_38810 ## cell_30700         5         E8.5       Surface ectoderm   cell_38588 ## cell_30701         5        E8.25 Forebrain/Midbrain/H..   cell_66082 ## cell_30702         5         E8.5             Erythroid3  cell_138114 ## cell_30703         5         E8.0                Doublet   cell_92644 ##            doub.density sizeFactor ##               <numeric>  <numeric> ## cell_9769    0.02985045    1.41243 ## cell_9770    0.00172753    1.22757 ## cell_9771    0.01338013    1.15439 ## cell_9772    0.00218402    1.28676 ## cell_9773    0.00211723    1.78719 ## ...                 ...        ... ## cell_30699   0.00146287   0.389311 ## cell_30700   0.00374155   0.588784 ## cell_30701   0.05651258   0.624455 ## cell_30702   0.00108837   0.550807 ## cell_30703   0.82369305   1.184919 colData(sce) |>     dplyr::as_tibble() |>     dplyr::count(sample) ## # A tibble: 6 × 2 ##   sample     n ##    <int> <int> ## 1      5  2411 ## 2      6  1047 ## 3      7  3007 ## 4      8  3097 ## 5      9  4544 ## 6     10  6829 colData(sce) |>     dplyr::as_tibble() |>     dplyr::count(celltype.mapped) ## # A tibble: 35 × 2 ##    celltype.mapped         n ##    <chr>               <int> ##  1 Allantois             955 ##  2 Blood progenitors 1    56 ##  3 Blood progenitors 2   245 ##  4 Cardiomyocytes        601 ##  5 Caudal Mesoderm        71 ##  6 Caudal epiblast        71 ##  7 Caudal neurectoderm    19 ##  8 Def. endoderm          91 ##  9 Doublet              1509 ## 10 Endothelium           350 ## # ℹ 25 more rows hist(colSums(counts(sce)), main = \"reads per cell\") sce |>     counts() |>     rowSums() |>     log1p() |>     hist(main = \"log1p reads per gene\") ## Ensembl 92 genome annotation library(AnnotationHub) ah <- AnnotationHub() query(ah, c(\"EnsDb\", \"Mus musculus\", \"92\")) ## AnnotationHub with 2 records ## # snapshotDate(): 2023-05-15 ## # $dataprovider: Ensembl ## # $species: Mus musculus domesticus, Mus musculus ## # $rdataclass: EnsDb ## # additional mcols(): taxonomyid, genome, description, ## #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags, ## #   rdatapath, sourceurl, sourcetype  ## # retrieve records with, e.g., 'object[[\"AH60992\"]]'  ##  ##              title                                         ##   AH60992  | Ensembl 92 EnsDb for Mus Musculus             ##   AH109654 | Ensembl 109 EnsDb for Mus musculus domesticus edb <- ah[[\"AH60992\"]] ## loading from cache genes(edb) ## GRanges object with 54590 ranges and 8 metadata columns: ##                      seqnames            ranges strand |            gene_id ##                         <Rle>         <IRanges>  <Rle> |        <character> ##   ENSMUSG00000102693        1   3073253-3074322      + | ENSMUSG00000102693 ##   ENSMUSG00000064842        1   3102016-3102125      + | ENSMUSG00000064842 ##   ENSMUSG00000051951        1   3205901-3671498      - | ENSMUSG00000051951 ##   ENSMUSG00000102851        1   3252757-3253236      + | ENSMUSG00000102851 ##   ENSMUSG00000103377        1   3365731-3368549      - | ENSMUSG00000103377 ##                  ...      ...               ...    ... .                ... ##   ENSMUSG00000095134        Y 90753057-90763485      + | ENSMUSG00000095134 ##   ENSMUSG00000095366        Y 90754513-90754821      - | ENSMUSG00000095366 ##   ENSMUSG00000096768        Y 90784738-90816464      + | ENSMUSG00000096768 ##   ENSMUSG00000099871        Y 90837413-90844040      + | ENSMUSG00000099871 ##   ENSMUSG00000096850        Y 90838869-90839177      - | ENSMUSG00000096850 ##                          gene_name           gene_biotype seq_coord_system ##                        <character>            <character>      <character> ##   ENSMUSG00000102693 4933401J01Rik                    TEC       chromosome ##   ENSMUSG00000064842       Gm26206                  snRNA       chromosome ##   ENSMUSG00000051951          Xkr4         protein_coding       chromosome ##   ENSMUSG00000102851       Gm18956   processed_pseudogene       chromosome ##   ENSMUSG00000103377       Gm37180                    TEC       chromosome ##                  ...           ...                    ...              ... ##   ENSMUSG00000095134      Mid1-ps1 unprocessed_pseudogene       chromosome ##   ENSMUSG00000095366       Gm21860         protein_coding       chromosome ##   ENSMUSG00000096768       Gm47283         protein_coding       chromosome ##   ENSMUSG00000099871       Gm21742 unprocessed_pseudogene       chromosome ##   ENSMUSG00000096850       Gm21748         protein_coding       chromosome ##                                 description      gene_id_version        symbol ##                                 <character>          <character>   <character> ##   ENSMUSG00000102693 RIKEN cDNA 4933401J0.. ENSMUSG00000102693.1 4933401J01Rik ##   ENSMUSG00000064842 predicted gene, 2620.. ENSMUSG00000064842.1       Gm26206 ##   ENSMUSG00000051951 X-linked Kx blood gr.. ENSMUSG00000051951.5          Xkr4 ##   ENSMUSG00000102851 predicted gene, 1895.. ENSMUSG00000102851.1       Gm18956 ##   ENSMUSG00000103377 predicted gene, 3718.. ENSMUSG00000103377.1       Gm37180 ##                  ...                    ...                  ...           ... ##   ENSMUSG00000095134 midline 1, pseudogen.. ENSMUSG00000095134.2      Mid1-ps1 ##   ENSMUSG00000095366                   NULL ENSMUSG00000095366.1       Gm21860 ##   ENSMUSG00000096768 predicted gene, 4728.. ENSMUSG00000096768.7       Gm47283 ##   ENSMUSG00000099871 predicted gene, 2174.. ENSMUSG00000099871.1       Gm21742 ##   ENSMUSG00000096850                   NULL ENSMUSG00000096850.1       Gm21748 ##                      entrezid ##                        <list> ##   ENSMUSG00000102693     <NA> ##   ENSMUSG00000064842     <NA> ##   ENSMUSG00000051951   497097 ##   ENSMUSG00000102851     <NA> ##   ENSMUSG00000103377     <NA> ##                  ...      ... ##   ENSMUSG00000095134     <NA> ##   ENSMUSG00000095366     <NA> ##   ENSMUSG00000096768   170942 ##   ENSMUSG00000099871     <NA> ##   ENSMUSG00000096850     <NA> ##   ------- ##   seqinfo: 117 sequences (1 circular) from GRCm38 genome filter <- list(     SeqNameFilter(\"1\"),     AnnotationFilter(~gene_id %in% rownames(sce)) ) chr1 <- genes(edb, filter = filter) sce[names(chr1), ] ## class: SingleCellExperiment  ## dim: 1734 20935  ## metadata(0): ## assays(1): counts ## rownames(1734): ENSMUSG00000051951 ENSMUSG00000089699 ... ##   ENSMUSG00000016481 ENSMUSG00000026616 ## rowData names(2): ENSEMBL SYMBOL ## colnames(20935): cell_9769 cell_9770 ... cell_30702 cell_30703 ## colData names(11): cell barcode ... doub.density sizeFactor ## reducedDimNames(2): pca.corrected.E7.5 pca.corrected.E8.5 ## mainExpName: NULL ## altExpNames(0):"},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"B. Using R to Understand Bioinformatic Results","text":"Packages Provide robust way document requirements analysis, organize complicated analyses distinct steps. ’ve found pkgdown useful presenting packages users. instance, material workshop available pkgdown. Vignettes Explict description analysis steps (good bioinformatician), coupled text graphics (good collaboration). Git Incremental ‘commits’ analysis progresses. Commits allow confident exploration – last commit always available ‘start ’. Tags allow checkpointing analysis, e.g., version analysis used original manuscript submission; version analysis associated revision final publciation. Containers fully reproducible analysis challenging implement – specifying software version enough, easy future investigator re-establish. Containers like docker singularity provide one mechanism creating ‘snapshot’ capturing exactly software used. Beware! Complicated containers might result fully reproducible analysis, provide little confidence robustness analysis.","code":"devtools::create(\"MyAnalysis\") setwd(\"MyAnalysis\") usethis::use_vignette(\"a_data_management\", \"A. Data management\") usethis::use_vignette(\"b_exploratory_visualization\", \"B. Exploration\") usethis::use_pkgdown() pkgdown::build_site()"},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"more-to-come","dir":"Articles","previous_headings":"Summary","what":"More to come…","title":"B. Using R to Understand Bioinformatic Results","text":"Tomorrow Discover single-cell data sets CELLxGENE data portal Download import data sets ‘Seurat’ ‘SingleCellExperiment’ objects. Coordinate cell annotation gene annotation","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/b_course_part_1.html","id":"session-information","dir":"Articles","previous_headings":"Summary","what":"Session information","title":"B. Using R to Understand Bioinformatic Results","text":"document produced following R software:","code":"sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    parallel  stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] MouseGastrulationData_1.15.0 SpatialExperiment_1.11.0     ##  [3] SingleCellExperiment_1.23.0  SummarizedExperiment_1.31.1  ##  [5] MatrixGenerics_1.13.0        matrixStats_1.0.0            ##  [7] ensembldb_2.25.0             AnnotationFilter_1.25.0      ##  [9] GenomicFeatures_1.53.0       AnnotationDbi_1.63.1         ## [11] Biobase_2.61.0               GenomicRanges_1.53.1         ## [13] GenomeInfoDb_1.37.1          IRanges_2.35.1               ## [15] S4Vectors_0.39.1             AnnotationHub_3.9.1          ## [17] BiocFileCache_2.9.0          dbplyr_2.3.2                 ## [19] BiocGenerics_0.47.0          plotly_4.10.2                ## [21] ggplot2_3.4.2                dplyr_1.1.2                  ##  ## loaded via a namespace (and not attached): ##   [1] jsonlite_1.8.5                magrittr_2.0.3                ##   [3] magick_2.7.4                  farver_2.1.1                  ##   [5] rmarkdown_2.22                fs_1.6.2                      ##   [7] BiocIO_1.11.0                 zlibbioc_1.47.0               ##   [9] ragg_1.2.5                    vctrs_0.6.2                   ##  [11] DelayedMatrixStats_1.23.0     memoise_2.0.1                 ##  [13] Rsamtools_2.17.0              RCurl_1.98-1.12               ##  [15] htmltools_0.5.5               S4Arrays_1.1.4                ##  [17] progress_1.2.2                curl_5.0.1                    ##  [19] Rhdf5lib_1.23.0               rhdf5_2.45.0                  ##  [21] SparseArray_1.1.10            sass_0.4.6                    ##  [23] bslib_0.5.0                   htmlwidgets_1.6.2             ##  [25] desc_1.4.2                    cachem_1.0.8                  ##  [27] GenomicAlignments_1.37.0      mime_0.12                     ##  [29] lifecycle_1.0.3               pkgconfig_2.0.3               ##  [31] Matrix_1.5-4.1                R6_2.5.1                      ##  [33] fastmap_1.1.1                 GenomeInfoDbData_1.2.10       ##  [35] shiny_1.7.4                   digest_0.6.31                 ##  [37] colorspace_2.1-0              rprojroot_2.0.3               ##  [39] dqrng_0.3.0                   ExperimentHub_2.7.1           ##  [41] textshaping_0.3.6             crosstalk_1.2.0               ##  [43] RSQLite_2.3.1                 beachmat_2.17.8               ##  [45] filelock_1.0.2                labeling_0.4.2                ##  [47] fansi_1.0.4                   httr_1.4.6                    ##  [49] mgcv_1.8-42                   compiler_4.3.0                ##  [51] bit64_4.0.5                   withr_2.5.0                   ##  [53] BiocParallel_1.35.2           DBI_1.1.3                     ##  [55] highr_0.10                    R.utils_2.12.2                ##  [57] HDF5Array_1.29.3              biomaRt_2.57.1                ##  [59] rappdirs_0.3.3                DelayedArray_0.27.5           ##  [61] rjson_0.2.21                  tools_4.3.0                   ##  [63] interactiveDisplayBase_1.39.0 httpuv_1.6.11                 ##  [65] R.oo_1.25.0                   glue_1.6.2                    ##  [67] restfulr_0.0.15               rhdf5filters_1.13.2           ##  [69] nlme_3.1-162                  promises_1.2.0.1              ##  [71] grid_4.3.0                    generics_0.1.3                ##  [73] gtable_0.3.3                  tzdb_0.4.0                    ##  [75] R.methodsS3_1.8.2             tidyr_1.3.0                   ##  [77] data.table_1.14.8             hms_1.1.3                     ##  [79] xml2_1.3.4                    utf8_1.2.3                    ##  [81] XVector_0.41.1                BiocVersion_3.18.0            ##  [83] pillar_1.9.0                  stringr_1.5.0                 ##  [85] limma_3.57.4                  vroom_1.6.3                   ##  [87] BumpyMatrix_1.9.0             later_1.3.1                   ##  [89] splines_4.3.0                 lattice_0.21-8                ##  [91] rtracklayer_1.61.0            bit_4.0.5                     ##  [93] tidyselect_1.2.0              locfit_1.5-9.8                ##  [95] scuttle_1.11.0                Biostrings_2.69.1             ##  [97] knitr_1.43                    ProtGenerics_1.33.0           ##  [99] edgeR_3.43.4                  xfun_0.39                     ## [101] DropletUtils_1.21.0           stringi_1.7.12                ## [103] lazyeval_0.2.2                yaml_2.3.7                    ## [105] evaluate_0.21                 codetools_0.2-19              ## [107] tibble_3.2.1                  BiocManager_1.30.21           ## [109] cli_3.6.1                     xtable_1.8-4                  ## [111] systemfonts_1.0.4             munsell_0.5.0                 ## [113] jquerylib_0.1.4               Rcpp_1.0.10                   ## [115] png_0.1-8                     XML_3.99-0.14                 ## [117] ellipsis_0.3.2                pkgdown_2.0.7                 ## [119] readr_2.1.4                   blob_1.2.4                    ## [121] prettyunits_1.1.1             sparseMatrixStats_1.13.0      ## [123] bitops_1.0-7                  viridisLite_0.4.2             ## [125] scales_1.2.1                  purrr_1.0.1                   ## [127] crayon_1.5.2                  rlang_1.1.1                   ## [129] KEGGREST_1.41.0"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_0_course_part_2.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"C.0 R and Bioconductor for Genomic Analysis","text":"script derived OSCA Multi-Sample book, Chapter 4: DE analyses conditions. See book full details. Initial analysis","code":"## load data library(MouseGastrulationData) sce.chimera <- WTChimeraData(samples=5:10) sce.chimera #> class: SingleCellExperiment  #> dim: 29453 20935  #> metadata(0): #> assays(1): counts #> rownames(29453): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000095742 tomato-td #> rowData names(2): ENSEMBL SYMBOL #> colnames(20935): cell_9769 cell_9770 ... cell_30702 cell_30703 #> colData names(11): cell barcode ... doub.density sizeFactor #> reducedDimNames(2): pca.corrected.E7.5 pca.corrected.E8.5 #> mainExpName: NULL #> altExpNames(0):  ## feature annotation library(scater) rownames(sce.chimera) <- uniquifyFeatureNames(     rowData(sce.chimera)$ENSEMBL, rowData(sce.chimera)$SYMBOL )  ## qc drop <- sce.chimera$celltype.mapped %in% c(\"stripped\", \"Doublet\") sce.chimera <- sce.chimera[,!drop]  ## normalization sce.chimera <- logNormCounts(sce.chimera)  ## variance modeling library(scran) dec.chimera <- modelGeneVar(sce.chimera, block=sce.chimera$sample) chosen.hvgs <- dec.chimera$bio > 0  ## merge batches library(batchelor) set.seed(01001001) merged <- correctExperiments(     sce.chimera,      batch=sce.chimera$sample,      subset.row=chosen.hvgs,     PARAM=FastMnnParam(         merge.order=list(             list(1,3,5), # WT (3 replicates)             list(2,4,6)  # td-Tomato (3 replicates)         )     ) ) #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  ## cluster g <- buildSNNGraph(merged, use.dimred=\"corrected\") clusters <- igraph::cluster_louvain(g) colLabels(merged) <- factor(clusters$membership)  ## dimensionality reduction merged <- runTSNE(merged, dimred=\"corrected\", external_neighbors=TRUE) merged <- runUMAP(merged, dimred=\"corrected\", external_neighbors=TRUE)"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_0_course_part_2.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"C.0 R and Bioconductor for Genomic Analysis","text":"document produced following R software:","code":"sessionInfo() #> R version 4.3.0 (2023-04-21) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] batchelor_1.17.0             scran_1.29.0                 #>  [3] scater_1.29.0                ggplot2_3.4.2                #>  [5] scuttle_1.11.0               MouseGastrulationData_1.15.0 #>  [7] SpatialExperiment_1.11.0     SingleCellExperiment_1.23.0  #>  [9] SummarizedExperiment_1.31.1  Biobase_2.61.0               #> [11] GenomicRanges_1.53.1         GenomeInfoDb_1.37.1          #> [13] IRanges_2.35.1               S4Vectors_0.39.1             #> [15] BiocGenerics_0.47.0          MatrixGenerics_1.13.0        #> [17] matrixStats_1.0.0            #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.5                magrittr_2.0.3                #>   [3] ggbeeswarm_0.7.2              magick_2.7.4                  #>   [5] rmarkdown_2.22                fs_1.6.2                      #>   [7] zlibbioc_1.47.0               ragg_1.2.5                    #>   [9] vctrs_0.6.2                   memoise_2.0.1                 #>  [11] DelayedMatrixStats_1.23.0     RCurl_1.98-1.12               #>  [13] htmltools_0.5.5               S4Arrays_1.1.4                #>  [15] AnnotationHub_3.9.1           curl_5.0.1                    #>  [17] BiocNeighbors_1.19.0          Rhdf5lib_1.23.0               #>  [19] SparseArray_1.1.10            rhdf5_2.45.0                  #>  [21] sass_0.4.6                    bslib_0.5.0                   #>  [23] desc_1.4.2                    cachem_1.0.8                  #>  [25] ResidualMatrix_1.11.0         igraph_1.4.3                  #>  [27] mime_0.12                     lifecycle_1.0.3               #>  [29] pkgconfig_2.0.3               rsvd_1.0.5                    #>  [31] Matrix_1.5-4.1                R6_2.5.1                      #>  [33] fastmap_1.1.1                 GenomeInfoDbData_1.2.10       #>  [35] shiny_1.7.4                   digest_0.6.31                 #>  [37] colorspace_2.1-0              AnnotationDbi_1.63.1          #>  [39] rprojroot_2.0.3               dqrng_0.3.0                   #>  [41] irlba_2.3.5.1                 ExperimentHub_2.7.1           #>  [43] textshaping_0.3.6             RSQLite_2.3.1                 #>  [45] beachmat_2.17.8               filelock_1.0.2                #>  [47] fansi_1.0.4                   httr_1.4.6                    #>  [49] compiler_4.3.0                bit64_4.0.5                   #>  [51] withr_2.5.0                   BiocParallel_1.35.2           #>  [53] viridis_0.6.3                 DBI_1.1.3                     #>  [55] HDF5Array_1.29.3              R.utils_2.12.2                #>  [57] rappdirs_0.3.3                DelayedArray_0.27.5           #>  [59] bluster_1.11.1                rjson_0.2.21                  #>  [61] tools_4.3.0                   vipor_0.4.5                   #>  [63] beeswarm_0.4.0                interactiveDisplayBase_1.39.0 #>  [65] httpuv_1.6.11                 R.oo_1.25.0                   #>  [67] glue_1.6.2                    rhdf5filters_1.13.2           #>  [69] promises_1.2.0.1              grid_4.3.0                    #>  [71] Rtsne_0.16                    cluster_2.1.4                 #>  [73] generics_0.1.3                gtable_0.3.3                  #>  [75] R.methodsS3_1.8.2             metapod_1.9.0                 #>  [77] BiocSingular_1.17.0           ScaledMatrix_1.9.1            #>  [79] utf8_1.2.3                    XVector_0.41.1                #>  [81] ggrepel_0.9.3                 BiocVersion_3.18.0            #>  [83] pillar_1.9.0                  stringr_1.5.0                 #>  [85] limma_3.57.4                  BumpyMatrix_1.9.0             #>  [87] later_1.3.1                   dplyr_1.1.2                   #>  [89] BiocFileCache_2.9.0           lattice_0.21-8                #>  [91] bit_4.0.5                     tidyselect_1.2.0              #>  [93] locfit_1.5-9.8                Biostrings_2.69.1             #>  [95] knitr_1.43                    gridExtra_2.3                 #>  [97] edgeR_3.43.4                  xfun_0.39                     #>  [99] statmod_1.5.0                 DropletUtils_1.21.0           #> [101] stringi_1.7.12                yaml_2.3.7                    #> [103] evaluate_0.21                 codetools_0.2-19              #> [105] tibble_3.2.1                  BiocManager_1.30.21           #> [107] cli_3.6.1                     uwot_0.1.14                   #> [109] xtable_1.8-4                  systemfonts_1.0.4             #> [111] munsell_0.5.0                 jquerylib_0.1.4               #> [113] Rcpp_1.0.10                   dbplyr_2.3.2                  #> [115] png_0.1-8                     parallel_4.3.0                #> [117] ellipsis_0.3.2                pkgdown_2.0.7                 #> [119] blob_1.2.4                    sparseMatrixStats_1.13.0      #> [121] bitops_1.0-7                  viridisLite_0.4.2             #> [123] scales_1.2.1                  purrr_1.0.1                   #> [125] crayon_1.5.2                  rlang_1.1.1                   #> [127] KEGGREST_1.41.0"},{"path":[]},{"path":"https://mtmorgan.github.io/XM2023/articles/c_1_cxg.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"C.1 CELLxGENE, Seurat, and Bioconductor","text":"document produced following R software:","code":"sessionInfo() #> R version 4.3.0 (2023-04-21) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.2       cli_3.6.1         knitr_1.43        rlang_1.1.1       #>  [5] xfun_0.39         stringi_1.7.12    purrr_1.0.1       textshaping_0.3.6 #>  [9] jsonlite_1.8.5    glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.5   #> [13] ragg_1.2.5        sass_0.4.6        rmarkdown_2.22    evaluate_0.21     #> [17] jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   #> [21] memoise_2.0.1     stringr_1.5.0     compiler_4.3.0    fs_1.6.2          #> [25] systemfonts_1.0.4 digest_0.6.31     R6_2.5.1          magrittr_2.0.3    #> [29] bslib_0.5.0       tools_4.3.0       pkgdown_2.0.7     cachem_1.0.8      #> [33] desc_1.4.2"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"orchestrating-single-cell-analysis-with-bioconductor","dir":"Articles","previous_headings":"","what":"Orchestrating Single-Cell Analysis with Bioconductor","title":"C.2 Annotating cell types","text":"OSCA – amazing resource!","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"annotating-cell-types","dir":"Articles","previous_headings":"","what":"Annotating cell types","title":"C.2 Annotating cell types","text":"script derived OSCA Basic book, Chapter 7: Cell type annotation. See book full details.","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"initial-analysis","dir":"Articles","previous_headings":"Annotating cell types","what":"Initial analysis","title":"C.2 Annotating cell types","text":"","code":"## data retrieval library(DropletTestFiles) raw.path <- getTestFile(\"tenx-2.1.0-pbmc4k/1.0.0/raw.tar.gz\") #> see ?DropletTestFiles and browseVignettes('DropletTestFiles') for documentation #> loading from cache out.path <- file.path(tempdir(), \"pbmc4k\") untar(raw.path, exdir=out.path)  ## input library(DropletUtils) fname <- file.path(out.path, \"raw_gene_bc_matrices/GRCh38\") sce.pbmc <- read10xCounts(fname, col.names=TRUE)  ## annotation library(scater) rownames(sce.pbmc) <- uniquifyFeatureNames(     rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol )  ## qc set.seed(100) e.out <- emptyDrops(counts(sce.pbmc)) sce.pbmc <- sce.pbmc[, which(e.out$FDR <= 0.001)]  ## normalization library(scran) set.seed(1000) clusters <- quickCluster(sce.pbmc) sce.pbmc <- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc <- logNormCounts(sce.pbmc)  ## variance modeling set.seed(1001) dec.pbmc <- modelGeneVarByPoisson(sce.pbmc) top.pbmc <- getTopHVGs(dec.pbmc, prop=0.1)  ## dimensionality reduction set.seed(10000) sce.pbmc <- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc)  set.seed(100000) sce.pbmc <- runTSNE(sce.pbmc, dimred=\"PCA\")  set.seed(1000000) sce.pbmc <- runUMAP(sce.pbmc, dimred=\"PCA\")  ## clustering g <- buildSNNGraph(sce.pbmc, k=10, use.dimred = 'PCA') clust <- igraph::cluster_walktrap(g)$membership colLabels(sce.pbmc) <- factor(clust)"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"using-curated-reference-data","dir":"Articles","previous_headings":"Annotating cell types","what":"Using curated reference data","title":"C.2 Annotating cell types","text":"Use curated reference data set, case derived Blueprint ENCODE data. Annotate data using ‘main’ label cell type","code":"library(celldex) ref <- BlueprintEncodeData() #> Warning: 'BlueprintEncodeData' is deprecated. #> Use 'celldex::BlueprintEncodeData' instead. #> See help(\"Deprecated\") #> see ?celldex and browseVignettes('celldex') for documentation #> loading from cache #> see ?celldex and browseVignettes('celldex') for documentation #> loading from cache colData(ref) |>     dplyr::as_tibble() #> # A tibble: 259 × 3 #>    label.main  label.fine  label.ont  #>    <chr>       <chr>       <chr>      #>  1 Neutrophils Neutrophils CL:0000775 #>  2 Monocytes   Monocytes   CL:0000576 #>  3 Neutrophils Neutrophils CL:0000775 #>  4 HSC         MEP         CL:0000050 #>  5 Neutrophils Neutrophils CL:0000775 #>  6 Monocytes   Monocytes   CL:0000576 #>  7 Neutrophils Neutrophils CL:0000775 #>  8 Monocytes   Monocytes   CL:0000576 #>  9 Neutrophils Neutrophils CL:0000775 #> 10 Neutrophils Neutrophils CL:0000775 #> # ℹ 249 more rows colData(ref) |>     dplyr::as_tibble() |>     dplyr::count(label.main, sort = TRUE) #> # A tibble: 25 × 2 #>    label.main            n #>    <chr>             <int> #>  1 HSC                  38 #>  2 Endothelial cells    26 #>  3 Macrophages          25 #>  4 Neutrophils          23 #>  5 Fibroblasts          20 #>  6 Epithelial cells     18 #>  7 Monocytes            16 #>  8 Smooth muscle        16 #>  9 CD4+ T-cells         14 #> 10 Adipocytes            9 #> # ℹ 15 more rows library(SingleR) ## assign each cell in sce.pbmc to a type pred <- SingleR(test=sce.pbmc, ref=ref, labels=ref$label.main) #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE. pred #> DataFrame with 4300 rows and 4 columns #>                                            scores       labels delta.next #>                                          <matrix>  <character>  <numeric> #> AAACCTGAGAAGGCCT-1 0.251873:0.118890:0.287805:...    Monocytes  0.4088010 #> AAACCTGAGACAGACC-1 0.280080:0.133100:0.334590:...    Monocytes  0.0666194 #> AAACCTGAGATAGTCA-1 0.267468:0.148610:0.298052:...    Monocytes  0.2941808 #> AAACCTGAGGCATGGT-1 0.211503:0.153752:0.345878:... CD4+ T-cells  0.1162873 #> AAACCTGCAAGGTTCT-1 0.218346:0.155343:0.367597:... CD8+ T-cells  0.1129399 #> ...                                           ...          ...        ... #> TTTGGTTTCGCTAGCG-1 0.294522:0.133758:0.392261:...    Monocytes  0.0665587 #> TTTGTCACACTTAACG-1 0.197799:0.131324:0.347844:...     NK cells  0.0543276 #> TTTGTCACAGGTCCAC-1 0.225583:0.128985:0.409526:...     NK cells  0.0998073 #> TTTGTCAGTTAAGACA-1 0.216604:0.146328:0.408886:...      B-cells  0.0668176 #> TTTGTCATCCCAAGAT-1 0.287555:0.134715:0.330531:...    Monocytes  0.0634004 #>                    pruned.labels #>                      <character> #> AAACCTGAGAAGGCCT-1     Monocytes #> AAACCTGAGACAGACC-1     Monocytes #> AAACCTGAGATAGTCA-1     Monocytes #> AAACCTGAGGCATGGT-1  CD4+ T-cells #> AAACCTGCAAGGTTCT-1  CD8+ T-cells #> ...                          ... #> TTTGGTTTCGCTAGCG-1     Monocytes #> TTTGTCACACTTAACG-1      NK cells #> TTTGTCACAGGTCCAC-1      NK cells #> TTTGTCAGTTAAGACA-1       B-cells #> TTTGTCATCCCAAGAT-1     Monocytes pred |>     dplyr::as_tibble() |>     dplyr::count(labels) #> # A tibble: 9 × 2 #>   labels           n #>   <chr>        <int> #> 1 B-cells        578 #> 2 CD4+ T-cells   815 #> 3 CD8+ T-cells  1358 #> 4 DC               1 #> 5 Eosinophils      1 #> 6 Erythrocytes     8 #> 7 HSC             14 #> 8 Monocytes     1258 #> 9 NK cells       267  plotScoreHeatmap(pred) #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE.  #> Warning: useNames = NA is deprecated. Instead, specify either useNames = TRUE #> or useNames = TRUE."},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"other-strategies","dir":"Articles","previous_headings":"Annotating cell types","what":"Other strategies","title":"C.2 Annotating cell types","text":"strategies ouline Chapter 7 Custom references Gene sets Markers","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_2_osca_cell_annotation.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"C.2 Annotating cell types","text":"document produced following R software:","code":"sessionInfo() #> R version 4.3.0 (2023-04-21) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleR_2.3.4               celldex_1.11.1              #>  [3] scran_1.29.0                EnsDb.Hsapiens.v86_2.99.0   #>  [5] ensembldb_2.25.0            AnnotationFilter_1.25.0     #>  [7] GenomicFeatures_1.53.0      AnnotationDbi_1.63.1        #>  [9] scater_1.29.0               ggplot2_3.4.2               #> [11] scuttle_1.11.0              DropletUtils_1.21.0         #> [13] SingleCellExperiment_1.23.0 SummarizedExperiment_1.31.1 #> [15] Biobase_2.61.0              GenomicRanges_1.53.1        #> [17] GenomeInfoDb_1.37.1         IRanges_2.35.1              #> [19] S4Vectors_0.39.1            BiocGenerics_0.47.0         #> [21] MatrixGenerics_1.13.0       matrixStats_1.0.0           #> [23] DropletTestFiles_1.11.0     #>  #> loaded via a namespace (and not attached): #>   [1] RcppAnnoy_0.0.20              later_1.3.1                   #>   [3] BiocIO_1.11.0                 bitops_1.0-7                  #>   [5] filelock_1.0.2                tibble_3.2.1                  #>   [7] R.oo_1.25.0                   XML_3.99-0.14                 #>   [9] lifecycle_1.0.3               edgeR_3.43.4                  #>  [11] rprojroot_2.0.3               lattice_0.21-8                #>  [13] magrittr_2.0.3                limma_3.57.4                  #>  [15] sass_0.4.6                    rmarkdown_2.22                #>  [17] jquerylib_0.1.4               yaml_2.3.7                    #>  [19] metapod_1.9.0                 httpuv_1.6.11                 #>  [21] RColorBrewer_1.1-3            DBI_1.1.3                     #>  [23] zlibbioc_1.47.0               Rtsne_0.16                    #>  [25] purrr_1.0.1                   R.utils_2.12.2                #>  [27] RCurl_1.98-1.12               rappdirs_0.3.3                #>  [29] GenomeInfoDbData_1.2.10       ggrepel_0.9.3                 #>  [31] irlba_2.3.5.1                 pheatmap_1.0.12               #>  [33] dqrng_0.3.0                   pkgdown_2.0.7                 #>  [35] DelayedMatrixStats_1.23.0     codetools_0.2-19              #>  [37] DelayedArray_0.27.5           xml2_1.3.4                    #>  [39] tidyselect_1.2.0              farver_2.1.1                  #>  [41] ScaledMatrix_1.9.1            viridis_0.6.3                 #>  [43] BiocFileCache_2.9.0           GenomicAlignments_1.37.0      #>  [45] jsonlite_1.8.5                BiocNeighbors_1.19.0          #>  [47] ellipsis_0.3.2                systemfonts_1.0.4             #>  [49] tools_4.3.0                   progress_1.2.2                #>  [51] ragg_1.2.5                    Rcpp_1.0.10                   #>  [53] glue_1.6.2                    gridExtra_2.3                 #>  [55] SparseArray_1.1.10            xfun_0.39                     #>  [57] dplyr_1.1.2                   HDF5Array_1.29.3              #>  [59] withr_2.5.0                   BiocManager_1.30.21           #>  [61] fastmap_1.1.1                 rhdf5filters_1.13.2           #>  [63] bluster_1.11.1                fansi_1.0.4                   #>  [65] digest_0.6.31                 rsvd_1.0.5                    #>  [67] R6_2.5.1                      mime_0.12                     #>  [69] textshaping_0.3.6             colorspace_2.1-0              #>  [71] biomaRt_2.57.1                RSQLite_2.3.1                 #>  [73] R.methodsS3_1.8.2             utf8_1.2.3                    #>  [75] generics_0.1.3                rtracklayer_1.61.0            #>  [77] prettyunits_1.1.1             httr_1.4.6                    #>  [79] S4Arrays_1.1.4                uwot_0.1.14                   #>  [81] pkgconfig_2.0.3               gtable_0.3.3                  #>  [83] blob_1.2.4                    XVector_0.41.1                #>  [85] htmltools_0.5.5               ProtGenerics_1.33.0           #>  [87] scales_1.2.1                  png_0.1-8                     #>  [89] knitr_1.43                    rjson_0.2.21                  #>  [91] curl_5.0.1                    cachem_1.0.8                  #>  [93] rhdf5_2.45.0                  stringr_1.5.0                 #>  [95] BiocVersion_3.18.0            parallel_4.3.0                #>  [97] vipor_0.4.5                   restfulr_0.0.15               #>  [99] desc_1.4.2                    pillar_1.9.0                  #> [101] grid_4.3.0                    vctrs_0.6.2                   #> [103] promises_1.2.0.1              BiocSingular_1.17.0           #> [105] dbplyr_2.3.2                  beachmat_2.17.8               #> [107] xtable_1.8-4                  cluster_2.1.4                 #> [109] beeswarm_0.4.0                evaluate_0.21                 #> [111] cli_3.6.1                     locfit_1.5-9.8                #> [113] compiler_4.3.0                Rsamtools_2.17.0              #> [115] rlang_1.1.1                   crayon_1.5.2                  #> [117] fs_1.6.2                      ggbeeswarm_0.7.2              #> [119] stringi_1.7.12                viridisLite_0.4.2             #> [121] BiocParallel_1.35.2           munsell_0.5.0                 #> [123] Biostrings_2.69.1             lazyeval_0.2.2                #> [125] Matrix_1.5-4.1                ExperimentHub_2.7.1           #> [127] hms_1.1.3                     sparseMatrixStats_1.13.0      #> [129] bit64_4.0.5                   Rhdf5lib_1.23.0               #> [131] KEGGREST_1.41.0               statmod_1.5.0                 #> [133] shiny_1.7.4                   highr_0.10                    #> [135] interactiveDisplayBase_1.39.0 AnnotationHub_3.9.1           #> [137] igraph_1.4.3                  memoise_2.0.1                 #> [139] bslib_0.5.0                   bit_4.0.5"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"orchestrating-single-cell-analysis-with-bioconductor","dir":"Articles","previous_headings":"","what":"Orchestrating Single-Cell Analysis with Bioconductor","title":"C.3 Differential Expression","text":"OSCA – amazing resource!","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"C.3 Differential Expression","text":"script derived OSCA Multi-Sample book, Chapter 4: DE analyses conditions. See book full details.","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"initial-analysis","dir":"Articles","previous_headings":"Differential expression","what":"Initial analysis","title":"C.3 Differential Expression","text":"","code":"## load data library(MouseGastrulationData) sce.chimera <- WTChimeraData(samples=5:10) sce.chimera #> class: SingleCellExperiment  #> dim: 29453 20935  #> metadata(0): #> assays(1): counts #> rownames(29453): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000095742 tomato-td #> rowData names(2): ENSEMBL SYMBOL #> colnames(20935): cell_9769 cell_9770 ... cell_30702 cell_30703 #> colData names(11): cell barcode ... doub.density sizeFactor #> reducedDimNames(2): pca.corrected.E7.5 pca.corrected.E8.5 #> mainExpName: NULL #> altExpNames(0):  ## feature annotation library(scater) rownames(sce.chimera) <- uniquifyFeatureNames(     rowData(sce.chimera)$ENSEMBL, rowData(sce.chimera)$SYMBOL )  ## qc drop <- sce.chimera$celltype.mapped %in% c(\"stripped\", \"Doublet\") sce.chimera <- sce.chimera[,!drop]  ## normalization sce.chimera <- logNormCounts(sce.chimera)  ## variance modeling library(scran) dec.chimera <- modelGeneVar(sce.chimera, block=sce.chimera$sample) chosen.hvgs <- dec.chimera$bio > 0  ## merge batches library(batchelor) set.seed(01001001) suppressWarnings({     merged <- correctExperiments(         sce.chimera,         batch=sce.chimera$sample,         subset.row=chosen.hvgs,         PARAM=FastMnnParam(             merge.order=list(                 list(1,3,5), # WT (3 replicates)                 list(2,4,6)  # td-Tomato (3 replicates)            )        )     ) })  ## cluster g <- buildSNNGraph(merged, use.dimred=\"corrected\") clusters <- igraph::cluster_louvain(g) colLabels(merged) <- factor(clusters$membership)  ## dimensionality reduction merged <- runTSNE(merged, dimred=\"corrected\", external_neighbors=TRUE) merged <- runUMAP(merged, dimred=\"corrected\", external_neighbors=TRUE)"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"differential-expression-1","dir":"Articles","previous_headings":"Differential expression","what":"Differential expression","title":"C.3 Differential Expression","text":"Initial observations – labels similar, whether ‘td-Tomato’ positive cell .  Create pseudo-bulk samples","code":"colData(merged) |>     dplyr::as_tibble() |>     dplyr::count(label, tomato) |>     tidyr::pivot_wider(names_from = \"tomato\", values_from = \"n\") #> # A tibble: 26 × 3 #>    label `FALSE` `TRUE` #>    <fct>   <int>  <int> #>  1 1         129    264 #>  2 2         363    512 #>  3 3         417    632 #>  4 4        1255    973 #>  5 5        1444    753 #>  6 6         868   1092 #>  7 7         542    398 #>  8 8         476    405 #>  9 9         269    333 #> 10 10        608    604 #> # ℹ 16 more rows  plotTSNE(merged, colour_by=\"tomato\", text_by=\"label\", point_size = .1) # Using 'label' and 'sample' as our two factors; each column of the output # corresponds to one unique combination of these two factors. summed <- aggregateAcrossCells(     merged,      id=colData(merged)[, c(\"celltype.mapped\", \"sample\")] ) summed #> class: SingleCellExperiment  #> dim: 14699 186  #> metadata(2): merge.info pca.info #> assays(1): counts #> rownames(14699): Xkr4 Rp1 ... Vmn2r122 CAAA01147332.1 #> rowData names(3): rotation ENSEMBL SYMBOL #> colnames: NULL #> colData names(16): batch cell ... sample ncells #> reducedDimNames(5): corrected pca.corrected.E7.5 pca.corrected.E8.5 #>   TSNE UMAP #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"C.3 Differential Expression","text":"Check following careful comprehensive evaluation single-cell differential expression methods: Soneson, C., Robinson, M. Bias, robustness scalability single-cell differential expression analysis. Nat Methods 15, 255–261 (2018). https://doi.org/10.1038/nmeth.4612","code":""},{"path":"https://mtmorgan.github.io/XM2023/articles/c_3_osca_differential_expression.html","id":"session-information","dir":"Articles","previous_headings":"Conclusions","what":"Session information","title":"C.3 Differential Expression","text":"document produced following R software:","code":"sessionInfo() #> R version 4.3.0 (2023-04-21) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] batchelor_1.17.0             scran_1.29.0                 #>  [3] scater_1.29.0                ggplot2_3.4.2                #>  [5] scuttle_1.11.0               MouseGastrulationData_1.15.0 #>  [7] SpatialExperiment_1.11.0     SingleCellExperiment_1.23.0  #>  [9] SummarizedExperiment_1.31.1  Biobase_2.61.0               #> [11] GenomicRanges_1.53.1         GenomeInfoDb_1.37.1          #> [13] IRanges_2.35.1               S4Vectors_0.39.1             #> [15] BiocGenerics_0.47.0          MatrixGenerics_1.13.0        #> [17] matrixStats_1.0.0            #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.5                magrittr_2.0.3                #>   [3] ggbeeswarm_0.7.2              magick_2.7.4                  #>   [5] farver_2.1.1                  rmarkdown_2.22                #>   [7] fs_1.6.2                      zlibbioc_1.47.0               #>   [9] ragg_1.2.5                    vctrs_0.6.2                   #>  [11] memoise_2.0.1                 DelayedMatrixStats_1.23.0     #>  [13] RCurl_1.98-1.12               htmltools_0.5.5               #>  [15] S4Arrays_1.1.4                AnnotationHub_3.9.1           #>  [17] curl_5.0.1                    BiocNeighbors_1.19.0          #>  [19] Rhdf5lib_1.23.0               SparseArray_1.1.10            #>  [21] rhdf5_2.45.0                  sass_0.4.6                    #>  [23] bslib_0.5.0                   desc_1.4.2                    #>  [25] cachem_1.0.8                  ResidualMatrix_1.11.0         #>  [27] igraph_1.4.3                  mime_0.12                     #>  [29] lifecycle_1.0.3               pkgconfig_2.0.3               #>  [31] rsvd_1.0.5                    Matrix_1.5-4.1                #>  [33] R6_2.5.1                      fastmap_1.1.1                 #>  [35] GenomeInfoDbData_1.2.10       shiny_1.7.4                   #>  [37] digest_0.6.31                 colorspace_2.1-0              #>  [39] AnnotationDbi_1.63.1          rprojroot_2.0.3               #>  [41] dqrng_0.3.0                   irlba_2.3.5.1                 #>  [43] ExperimentHub_2.7.1           textshaping_0.3.6             #>  [45] RSQLite_2.3.1                 beachmat_2.17.8               #>  [47] labeling_0.4.2                filelock_1.0.2                #>  [49] fansi_1.0.4                   httr_1.4.6                    #>  [51] compiler_4.3.0                bit64_4.0.5                   #>  [53] withr_2.5.0                   BiocParallel_1.35.2           #>  [55] viridis_0.6.3                 DBI_1.1.3                     #>  [57] highr_0.10                    HDF5Array_1.29.3              #>  [59] R.utils_2.12.2                rappdirs_0.3.3                #>  [61] DelayedArray_0.27.5           bluster_1.11.1                #>  [63] rjson_0.2.21                  tools_4.3.0                   #>  [65] vipor_0.4.5                   beeswarm_0.4.0                #>  [67] interactiveDisplayBase_1.39.0 httpuv_1.6.11                 #>  [69] R.oo_1.25.0                   glue_1.6.2                    #>  [71] rhdf5filters_1.13.2           promises_1.2.0.1              #>  [73] grid_4.3.0                    Rtsne_0.16                    #>  [75] cluster_2.1.4                 generics_0.1.3                #>  [77] gtable_0.3.3                  R.methodsS3_1.8.2             #>  [79] tidyr_1.3.0                   metapod_1.9.0                 #>  [81] BiocSingular_1.17.0           ScaledMatrix_1.9.1            #>  [83] utf8_1.2.3                    XVector_0.41.1                #>  [85] ggrepel_0.9.3                 BiocVersion_3.18.0            #>  [87] pillar_1.9.0                  stringr_1.5.0                 #>  [89] limma_3.57.4                  BumpyMatrix_1.9.0             #>  [91] later_1.3.1                   dplyr_1.1.2                   #>  [93] BiocFileCache_2.9.0           lattice_0.21-8                #>  [95] bit_4.0.5                     tidyselect_1.2.0              #>  [97] locfit_1.5-9.8                Biostrings_2.69.1             #>  [99] knitr_1.43                    gridExtra_2.3                 #> [101] edgeR_3.43.4                  xfun_0.39                     #> [103] statmod_1.5.0                 DropletUtils_1.21.0           #> [105] stringi_1.7.12                yaml_2.3.7                    #> [107] evaluate_0.21                 codetools_0.2-19              #> [109] tibble_3.2.1                  BiocManager_1.30.21           #> [111] cli_3.6.1                     uwot_0.1.14                   #> [113] xtable_1.8-4                  systemfonts_1.0.4             #> [115] munsell_0.5.0                 jquerylib_0.1.4               #> [117] Rcpp_1.0.10                   dbplyr_2.3.2                  #> [119] png_0.1-8                     parallel_4.3.0                #> [121] ellipsis_0.3.2                pkgdown_2.0.7                 #> [123] blob_1.2.4                    sparseMatrixStats_1.13.0      #> [125] bitops_1.0-7                  viridisLite_0.4.2             #> [127] scales_1.2.1                  purrr_1.0.1                   #> [129] crayon_1.5.2                  rlang_1.1.1                   #> [131] cowplot_1.1.1                 KEGGREST_1.41.0"},{"path":"https://mtmorgan.github.io/XM2023/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. NIH NHGRI U24HG004059. Funder.","code":""},{"path":"https://mtmorgan.github.io/XM2023/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). XM2023: Talk Short Course Material R / Bioconductor XM2023. R package version 0.0.0.9009, https://mtmorgan.github.io/XM2023/.","code":"@Manual{,   title = {XM2023: Talk and Short Course Material for R / Bioconductor XM2023},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9009},   url = {https://mtmorgan.github.io/XM2023/}, }"},{"path":"https://mtmorgan.github.io/XM2023/index.html","id":"xm2023--brazilian-association-for-bioinformatics-and-computational-biology","dir":"","previous_headings":"","what":"Talk and Short Course Material for R / Bioconductor XM2023","title":"Talk and Short Course Material for R / Bioconductor XM2023","text":"document located https://mtmorgan.github.io/XM2023  resource includes material presented XM2023, international conference Brazilian Association Bioinformatics Computational Biology, held Curitiba Paraná, 13 16 June 2023. Dr. Morgan presented talk two short courses. talk addressed contribution future Bioconductor. . Bioconductor Advances Science Two short workshops illustrate use R Bioconductor genomic analysis, emphasizing modern single-cell approaches. first workshop introduces R, explores essential data management tasks (instance summarizing cell types plotting ‘UMAP’ single-cell RNASeq experiment) using ‘tidy’ paradigm. previous experience R required. second workshop walks single-cell RNAseq analysis using R Bioconductor packages. Users familiar R benefit workshop, users levels able follow along. B. Using R Understand Bioinformatic Results C. R / Bioconductor Genomic Analysis","code":""},{"path":"https://mtmorgan.github.io/XM2023/reference/XM2023.html","id":null,"dir":"Reference","previous_headings":"","what":"XM2023 Package — XM2023-package","title":"XM2023 Package — XM2023-package","text":"XM2023 Package","code":""}]
